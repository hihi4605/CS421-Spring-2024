import * as i0 from '@angular/core';
import { Injectable, Component, ViewChild, HostListener, Inject, NgModule } from '@angular/core';
import * as i1 from 'ngx-cookie-service';
import { CookieService } from 'ngx-cookie-service';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';

class GameCookieService {
    constructor(cookieService) {
        this.cookieService = cookieService;
    }
    getCookie(cookieName) {
        return this.cookieService.get(cookieName);
    }
    getGameData() {
        const cookie = this.getCookie('bp-space-invaders');
        return cookie ? JSON.parse(cookie) : { highScore: 0 };
    }
    setGameData(data) {
        this.cookieService.set('bp-space-invaders', JSON.stringify(data));
    }
    getDebugData() {
        const cookie = this.getCookie('bp-space-invaders-debug');
        return cookie ? JSON.parse(cookie)['assetName'] : '';
    }
    getSecondaryDebugData() {
        const cookie = this.getCookie('bp-space-invaders-debug');
        return cookie ? JSON.parse(cookie)['secondaryAssetName'] : '';
    }
    setDebugData(debugData) {
        const cookie = this.getCookie('bp-space-invaders-debug');
        const existingCookie = (cookie ? JSON.parse(cookie) : {});
        existingCookie.assetName = debugData.assetName ? debugData.assetName : existingCookie.assetName;
        existingCookie.secondaryAssetName = debugData.secondaryAssetName
            ? debugData.secondaryAssetName
            : existingCookie.secondaryAssetName;
        this.cookieService.set('bp-space-invaders-debug', JSON.stringify(existingCookie));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameCookieService, deps: [{ token: i1.CookieService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameCookieService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameCookieService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.CookieService }] });

var AssetAlignEnum;
(function (AssetAlignEnum) {
    AssetAlignEnum["left"] = "left";
    AssetAlignEnum["leftThird"] = "leftThird";
    AssetAlignEnum["leftFourth"] = "leftFourth";
    AssetAlignEnum["right"] = "right";
    AssetAlignEnum["rightThird"] = "rightThird";
    AssetAlignEnum["rightFourth"] = "rightFourth";
    AssetAlignEnum["center"] = "center";
})(AssetAlignEnum || (AssetAlignEnum = {}));

var AssetAlignVerticalEnum;
(function (AssetAlignVerticalEnum) {
    AssetAlignVerticalEnum["top"] = "top";
    AssetAlignVerticalEnum["bottom"] = "bottom";
    AssetAlignVerticalEnum["middle"] = "middle";
})(AssetAlignVerticalEnum || (AssetAlignVerticalEnum = {}));

const BLOCK_SIZE$6 = 3;
const COLS$6 = 260;
const ROWS$6 = 240;
const ALIEN_ROWS = 6;
const ALIEN_COLUMNS = 6;
const MOON_HEIGHT = 10;
const COLORS$6 = [
    'rgba(34, 65, 4)',
    'rgba(200, 95, 36)',
    'rgba(8, 136, 23)'
];
class LEVELHEIGHT {
    static { this[0] = 20; }
    static { this[1] = 30; }
    static { this[2] = 40; }
    static { this[3] = 50; }
    static { this[4] = 60; }
    static { this[5] = 70; }
    static { this[6] = 80; }
    static { this[7] = 90; }
}
class LEVELSPEED {
    static { this[0] = 700; }
    static { this[1] = 500; }
    static { this[2] = 350; }
    static { this[3] = 250; }
    static { this[4] = 150; }
    static { this[5] = 100; }
}

class GameService {
    constructor() {
        this.masterSubject$ = new Subject();
    }
    valid(asset, boundary) {
        return asset.shape.every((row, dy) => {
            return row.every((value, dx) => {
                const x = asset.x + dx;
                const y = asset.y + dy;
                return (this.isEmpty(value) ||
                    (this.insideWalls(x, boundary) &&
                        this.aboveFloor(y, boundary.floor) &&
                        this.belowCeiling(y, boundary.ceiling)));
            });
        });
    }
    isEmpty(value) {
        return value === 0;
    }
    insideWalls(x, boundary) {
        return x >= boundary.left && x <= boundary.right;
    }
    belowCeiling(y, boundaryTop) {
        return y >= boundaryTop;
    }
    aboveFloor(y, boundaryBottom) {
        return y <= boundaryBottom;
    }
    getBoundary(boundarySetup) {
        return {
            left: boundarySetup.x,
            right: boundarySetup.width,
            ceiling: boundarySetup.y,
            floor: boundarySetup.height
        };
    }
    isHit(asset, damageAsset) {
        if (asset.x <= damageAsset.x &&
            damageAsset.x <= asset.x + asset.shape[0].length &&
            asset.y <= damageAsset.y &&
            damageAsset.y <= asset.y + asset.shape.length) {
            const startY = damageAsset.y;
            let maxY = startY + damageAsset.shape.length;
            if (maxY > asset.y + asset.shape.length) {
                maxY = asset.y + asset.shape.length;
            }
            for (let y = startY; y < maxY; y++) {
                for (let x = damageAsset.x; x < damageAsset.x + damageAsset.shape[y - damageAsset.y].length; x++) {
                    const assetY = Math.round(Math.abs(y - asset.y));
                    const assetX = Math.round(Math.abs(x - asset.x));
                    const damageAssetY = Math.round(Math.abs(y - damageAsset.y));
                    const damageAssetX = Math.round(Math.abs(x - damageAsset.x));
                    if (asset.shape[assetY][assetX] > 0 && damageAsset.shape[damageAssetY][damageAssetX] > 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    addOutlines(ctx, offset, width) {
        ctx.fillStyle = 'grey';
        let lastIndex = 0;
        for (let index = 0; index < ctx.canvas.width; index += offset) {
            ctx.fillRect(index, 0, width, ctx.canvas.height);
            lastIndex = index;
        }
        ctx.fillRect(lastIndex + 1, 0, width, ctx.canvas.height);
        for (let index = 0; index < ctx.canvas.height; index += offset) {
            ctx.fillRect(0, index, ctx.canvas.width, width);
            lastIndex = index;
        }
        ctx.fillRect(0, lastIndex + 1, ctx.canvas.width, width);
        ctx.fillStyle = 'red';
        ctx.fillRect(ctx.canvas.width / (BLOCK_SIZE$6 * 2), 0, width, ctx.canvas.height);
        ctx.fillRect(0, ctx.canvas.height / (BLOCK_SIZE$6 * 2), ctx.canvas.width, width);
    }
    initBoard(canvas, columns, rows, blockSize) {
        const ctx = canvas.nativeElement.getContext('2d');
        this.board = {
            x: 0,
            y: 0,
            height: rows,
            width: columns
        };
        ctx.canvas.width = columns * blockSize + 1;
        ctx.canvas.height = rows * blockSize + 1;
        ctx.scale(blockSize, blockSize);
        return ctx;
    }
    getGameboard() {
        return this.board;
    }
    getMasterObservable() {
        return this.masterSubject$;
    }
    emitMasterObservableEvent(data) {
        this.masterSubject$.next(data);
    }
    positionAsset(asset, alignPosition, justifyPosition) {
        let x = 0;
        let y = 0;
        if (alignPosition === AssetAlignEnum.center) {
            x = (this.board.width - asset.getAssetWidth()) / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftThird) {
            x = this.board.width / 3 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftFourth) {
            x = this.board.width / 4 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightThird) {
            x = (this.board.width * 2) / 3 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightFourth) {
            x = (this.board.width * 3) / 4 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.right) {
            x = this.board.width - asset.getAssetWidth();
        }
        if (justifyPosition === AssetAlignVerticalEnum.bottom) {
            y = this.board.height - asset.getAssetHeight();
        }
        else if (justifyPosition === AssetAlignVerticalEnum.middle) {
            y = (this.board.height - asset.getAssetHeight()) / 2;
        }
        return {
            x: Math.round(x),
            y: Math.round(y)
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

const ASSET_ANIMATION_1$e = [
    [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],
    [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0],
    [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0],
    [0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 0],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0],
    [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0]
];
const ASSET_ANIMATION$e = [ASSET_ANIMATION_1$e];

const COLS$5 = 31;
const ROWS$5 = 31;
const BLOCK_SIZE$5 = 25;
const COLORS$5 = [
    'none',
    'rgba(200, 95, 36)',
    'rgba(255, 0, 0)',
    'rgba(122, 122, 122)',
    'rgba(163, 46, 132)'
];
let KEY$4 = class KEY {
    static { this.DOWN = 'ArrowDown'; }
    static { this.LEFT = 'ArrowLeft'; }
    static { this.RIGHT = 'ArrowRight'; }
};
const DESTRUCTION_ANIMATION_1$2 = [
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 0, 2, 3, 2, 0, 2, 0, 0, 0],
    [0, 0, 2, 0, 2, 2, 3, 2, 0, 0],
    [0, 0, 0, 2, 3, 2, 2, 0, 0, 0],
    [0, 0, 2, 3, 2, 2, 0, 2, 0, 0],
    [0, 0, 2, 0, 2, 3, 2, 2, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 2]
];
const DESTRUCTION_ANIMATION_2$2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 2, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 3, 0, 2, 3, 0, 0, 0],
    [0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 3, 0, 2, 2, 0, 0, 0],
    [0, 0, 2, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION_3$2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 3, 0, 2, 0, 0, 0, 0],
    [0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION$2 = [DESTRUCTION_ANIMATION_1$2, DESTRUCTION_ANIMATION_2$2, DESTRUCTION_ANIMATION_3$2];

var ObservableTypeEnum;
(function (ObservableTypeEnum) {
    ObservableTypeEnum["alienBossDestroyed"] = "alienBossDestroyed";
    ObservableTypeEnum["alienCreepLeftBoundary"] = "alienCreepLeftBoundary";
    ObservableTypeEnum["alienCreepRightBoundary"] = "alienCreepRightBoundary";
    ObservableTypeEnum["alienDestroyed"] = "alienDestroyed";
    ObservableTypeEnum["alienDrop"] = "alienDrop";
    ObservableTypeEnum["bombDropped"] = "bombDropped";
    ObservableTypeEnum["displayScore"] = "displayScore";
    ObservableTypeEnum["gameOver"] = "gameOver";
    ObservableTypeEnum["gamePaused"] = "gamePaused";
    ObservableTypeEnum["gameStarted"] = "gameStarted";
    ObservableTypeEnum["keyDownEvent"] = "keyDownEvent";
    ObservableTypeEnum["keyUpEvent"] = "keyUpEvent";
    ObservableTypeEnum["missileShot"] = "missileShot";
    ObservableTypeEnum["moonDefenseDestroyed"] = "moonDefenseDestroyed";
    ObservableTypeEnum["spaceshipDestroyed"] = "spaceshipDestroyed";
})(ObservableTypeEnum || (ObservableTypeEnum = {}));

class AssetClass {
    constructor(gameService, ctx, boundarySetup, uid) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundarySetup = boundarySetup;
        this.uid = uid;
        this.x = 0;
        this.y = 0;
        this.isAnimateOnce = false;
        this.isDestroyed = false;
        this.isGameOver = false;
        this.isGamePaused = false;
        this.spawn();
        this.boundary = this.gameService.getBoundary(boundarySetup);
        this.init();
    }
    init() {
        this.gameService.getMasterObservable().subscribe((result) => {
            if (result.type === ObservableTypeEnum.keyDownEvent || result.type === ObservableTypeEnum.keyUpEvent) {
                this.processKeyStroke(result);
            }
            else if (result.type === ObservableTypeEnum.gameOver) {
                this.isGameOver = result.booleanData;
            }
            else if (result.type === ObservableTypeEnum.gamePaused) {
                this.isGamePaused = result.booleanData;
            }
        });
    }
    getAssetHeight() {
        return this.shape.length;
    }
    getAssetWidth() {
        return this.shape[0].length;
    }
    positionAsset(alignPosition, justifyPosition) {
        let x = 0;
        let y = 0;
        if (alignPosition === AssetAlignEnum.center) {
            x = (this.boundary.right - this.getAssetWidth()) / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftThird) {
            x = this.boundary.right / 3 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftFourth) {
            x = this.boundary.right / 4 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightThird) {
            x = (this.boundary.right * 2) / 3 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightFourth) {
            x = (this.boundary.right * 3) / 4 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.right) {
            x = this.boundary.right - this.getAssetWidth();
        }
        if (justifyPosition === AssetAlignVerticalEnum.bottom) {
            y = this.boundary.floor - this.getAssetHeight();
        }
        else if (justifyPosition === AssetAlignVerticalEnum.middle) {
            y = (this.boundary.floor - this.getAssetHeight()) / 2;
        }
        return {
            x: Math.round(x),
            y: Math.round(y)
        };
    }
    processKeyStroke(event) { }
    spawn() {
        if (!(this.assetAnimation && this.assetAnimation.length > 0)) {
            throw new Error('You must have an asset array.');
        }
        if (!this.engineAnimation) {
            throw new Error('You must have an engine array.');
        }
        this.engineXOffset = 0;
        this.engineYOffset = this.assetAnimation.length;
        this.assetTimer = { start: 0, elapsed: 0 };
        this.destructionTimer = { start: 0, elapsed: 0 };
        this.engineTimer = { start: 0, elapsed: 0 };
        this.animationCounter = 0;
        this.engineAnimationCounter = 0;
        this.destructionAnimationCounter = 0;
        this.assetTimer.start = performance.now();
        this.destructionTimer.start = performance.now();
        this.engineTimer.start = performance.now();
        this.restore();
    }
    restore() {
        this.shape = JSON.parse(JSON.stringify(this.assetAnimation.concat(JSON.parse(JSON.stringify(this.engineAnimation)))));
    }
    move(asset) {
        this.x = Math.round(asset.x);
        this.y = Math.round(asset.y);
    }
    stopAnimation() {
        if (this.isDestroyed || this.isGameOver || this.isGamePaused || this.isAnimateOnce) {
            cancelAnimationFrame(this.requestId);
            return true;
        }
        return false;
    }
}

class AlienClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid, assetPoints) {
        super(gameService, ctx, boundarySetup, guid);
        this.assetPoints = assetPoints;
        this.bombTimer = {
            start: performance.now(),
            elapsed: 0
        };
    }
    spawn() {
        this.assetAnimation = this.assetAnimations[0];
        this.engineAnimation = [];
        this.destructionAnimations = DESTRUCTION_ANIMATION$2;
        this.destructionAnimation = this.destructionAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawAlien();
        this.ctx.restore();
    }
    drawAlien() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$5[value];
                    this.ctx.fillRect(x, y, 1, 1);
                }
            });
        });
    }
    isHit(missileAsset) {
        if (!this.isDestroyed) {
            this.isDestroyed = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, missileAsset);
            const alienType = this.isAlienAsset ? ObservableTypeEnum.alienDestroyed : ObservableTypeEnum.alienBossDestroyed;
            if (this.isDestroyed) {
                this.gameService.emitMasterObservableEvent({
                    type: alienType,
                    numberData: this.uid,
                    pointData: this.points
                });
                missileAsset.isDestroyed = true;
            }
        }
    }
    creep(asset) {
        asset.shape = this.shape;
        return this.gameService.valid(asset, this.boundary);
    }
    randomizeDropBomb() {
        if (this.canFireWeapon) {
            const randomBombNumber = Math.floor(Math.random() * 10 + 1);
            return randomBombNumber >= 4 && randomBombNumber <= 6;
        }
        return false;
    }
    drawAlienDestruction() {
        this.destructionAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$5[value];
                    this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
                }
            });
        });
    }
    destructionAnimate(now = 0) {
        this.destructionTimer.elapsed = now - this.destructionTimer.start;
        if (this.destructionAnimationCounter === this.destructionAnimations.length) {
            cancelAnimationFrame(this.destructionRequestId);
            return;
        }
        if (this.destructionTimer.elapsed > 50) {
            this.destructionTimer.start = now;
            this.destructionAnimation =
                this.destructionAnimations[this.destructionAnimationCounter++ % this.destructionAnimations.length];
        }
        this.drawAlienDestruction();
        this.destructionRequestId = requestAnimationFrame(this.destructionAnimate.bind(this));
    }
    animate(now = 0) {
        this.assetTimer.elapsed = now - this.assetTimer.start;
        this.bombTimer.elapsed = now - this.bombTimer.start;
        if (this.isDestroyed) {
            this.destructionAnimate();
            return;
        }
        this.destructionAnimationCounter = 0;
        if (this.assetTimer.elapsed > 900) {
            this.assetTimer.start = now;
            this.assetAnimation = this.assetAnimations[this.animationCounter++ % this.assetAnimations.length];
        }
        if (this.bombTimer.elapsed > 1000) {
            this.bombTimer.start = now;
            if (this.randomizeDropBomb()) {
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.bombDropped,
                    assetCoordinateData: {
                        x: this.x + this.getAssetWidth() / 2 - 1,
                        y: this.y + this.getAssetHeight() - 5
                    }
                });
            }
        }
        this.draw();
    }
    get points() {
        return this.assetPoints;
    }
    isAlien() {
        return this.isAlienAsset;
    }
}

class AlienBossClass extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid, points) {
        super(gameService, ctx, boundarySetup, guid, points);
        this.moves = {
            [KEY$4.LEFT]: (asset) => ({ ...asset, x: asset.x - 5 }),
            [KEY$4.RIGHT]: (asset) => ({ ...asset, x: asset.x + 5 })
        };
        this.directionLeft = true;
        this.isAlienAsset = false;
    }
    determineBossDirection() {
        this.directionLeft = Math.floor(Math.random() * 10) + 1 > 5;
    }
    positionAlienBoss() {
        this.determineBossDirection();
        const direction = this.directionLeft ? AssetAlignEnum.right : AssetAlignEnum.left;
        const asset = this.positionAsset(direction, AssetAlignVerticalEnum.top);
        asset.y = this.y;
        this.move(asset);
        this.isDestroyed = false;
    }
    animate(now = 0) {
        this.assetTimer.elapsed = now - this.assetTimer.start;
        if (this.isDestroyed) {
            this.destructionAnimate();
            return;
        }
        if (this.isGameOver) {
            this.isDestroyed = true;
            return;
        }
        this.destructionAnimationCounter = 0;
        if (this.assetTimer.elapsed > 200) {
            this.assetTimer.start = now;
            this.assetAnimation = this.assetAnimations[this.animationCounter++ % this.assetAnimations.length];
            const asset = this.directionLeft ? this.moves['ArrowLeft'](this) : this.moves['ArrowRight'](this);
            if (this.gameService.valid(asset, this.boundary)) {
                this.move(asset);
            }
            else {
                this.isDestroyed = true;
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.alienBossDestroyed,
                    booleanData: true,
                    pointData: 0
                });
            }
        }
        this.draw();
    }
}

class AlienBoss1Class extends AlienBossClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 120);
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$e;
        super.spawn();
    }
}

const ASSET_ANIMATION_1$d = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$d = [ASSET_ANIMATION_1$d];

class AlienBoss2Class extends AlienBossClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 120);
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$d;
        super.spawn();
    }
}

class AlienBossComponent {
    constructor(gameService, gameCookieService) {
        this.gameService = gameService;
        this.gameCookieService = gameCookieService;
        this.isAnimateOnce = true;
        this.assets = [
            {
                key: 'alienBoss',
                name: 'Boss'
            },
            {
                key: 'alienBoss2',
                name: 'Boss 2'
            }
        ];
    }
    ngOnInit() {
        const columns = 20;
        const rows = 20;
        this.ctx = this.gameService.initBoard(this.canvas, rows, columns, 25);
        this.addAlienBosses({
            x: 0,
            y: 0,
            height: rows,
            width: columns
        });
        this.toggleAssets(this.gameCookieService.getSecondaryDebugData());
        this.animate();
    }
    addAlienBosses(boundary) {
        this.alienBosses = [];
        const boss = new AlienBoss1Class(this.gameService, this.ctx, boundary, 1);
        boss.move(boss.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        boss.isAnimateOnce = true;
        this.alienBosses.push(boss);
        const boss2 = new AlienBoss2Class(this.gameService, this.ctx, boundary, 1);
        boss2.move(boss2.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        boss2.isAnimateOnce = true;
        this.alienBosses.push(boss2);
        this.alienBoss = this.alienBosses[1];
        this.alienBoss.isAnimateOnce = true;
        this.alienBoss.isDestroyed = false;
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.alienBoss.isDestroyed = false;
        this.alienBoss.move(this.alienBoss.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 1, 0.025);
    }
    animate() {
        this.draw();
        this.alienBoss.animate();
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    toggleAssets(key) {
        this.alienBoss.isDestroyed = true;
        this.draw();
        let index = 0;
        this.alienBosses.map((alienBoss) => {
            alienBoss.isDestroyed = true;
        });
        this.assets.map((asset, $index) => {
            if (key === asset.key) {
                index = $index;
                this.gameCookieService.setDebugData({
                    secondaryAssetName: key
                });
            }
        });
        this.alienBoss = this.alienBosses[index];
        this.animateAsset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: AlienBossComponent, deps: [{ token: GameService }, { token: GameCookieService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: AlienBossComponent, selector: "bp-alien-boss", viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Alien</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: AlienBossComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-alien-boss', template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Alien</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }, { type: GameCookieService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }] } });

const ASSET_ANIMATION_1$c = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATE_2$5 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$c = [ASSET_ANIMATION_1$c, ASSET_ANIMATE_2$5];

class Alien1Class extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 30);
        this.isAlienAsset = true;
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$c;
        super.spawn();
    }
}

const ASSET_ANIMATION_1$b = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATE_2$4 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$b = [ASSET_ANIMATION_1$b, ASSET_ANIMATE_2$4];

class Alien2Class extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 25);
        this.isAlienAsset = true;
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$b;
        super.spawn();
    }
}

const ASSET_ANIMATION_1$a = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATE_2$3 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$a = [ASSET_ANIMATION_1$a, ASSET_ANIMATE_2$3];

class Alien3Class extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 20);
        this.isAlienAsset = true;
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$a;
        super.spawn();
    }
}

const ASSET_ANIMATION_1$9 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATE_2$2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$9 = [ASSET_ANIMATION_1$9, ASSET_ANIMATE_2$2];

class Alien4Class extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 15);
        this.isAlienAsset = true;
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$9;
        super.spawn();
    }
}

const ASSET_ANIMATION_1$8 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATE_2$1 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$8 = [ASSET_ANIMATION_1$8, ASSET_ANIMATE_2$1];

class Alien5Class extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 10);
        this.isAlienAsset = true;
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$8;
        super.spawn();
    }
}

const ASSET_ANIMATION_1$7 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATE_2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ASSET_ANIMATION$7 = [ASSET_ANIMATION_1$7, ASSET_ANIMATE_2];

class Alien6Class extends AlienClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid, 5);
        this.isAlienAsset = true;
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$7;
        super.spawn();
    }
}

class AlienComponent {
    constructor(gameService, gameCookieService) {
        this.gameService = gameService;
        this.gameCookieService = gameCookieService;
        this.isAnimateOnce = true;
        this.assets = [
            {
                key: 'alien1',
                name: 'A-1'
            },
            {
                key: 'alien2',
                name: 'A-2'
            },
            {
                key: 'alien3',
                name: 'A-3'
            },
            {
                key: 'alien4',
                name: 'A-4'
            },
            {
                key: 'alien5',
                name: 'A-5'
            },
            {
                key: 'alien6',
                name: 'A-6'
            }
        ];
    }
    ngOnInit() {
        const rows = 20;
        const columns = 20;
        this.ctx = this.gameService.initBoard(this.canvas, rows, columns, 25);
        this.addAliens({
            x: 0,
            y: 0,
            height: rows,
            width: columns
        });
        this.toggleAssets(this.gameCookieService.getSecondaryDebugData());
        this.animate();
    }
    addAliens(boundary) {
        this.aliens = [];
        const alien1 = new Alien1Class(this.gameService, this.ctx, boundary, 1);
        alien1.move(alien1.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        alien1.isDestroyed = true;
        this.aliens.push(alien1);
        const alien2 = new Alien2Class(this.gameService, this.ctx, boundary, 1);
        alien2.isDestroyed = true;
        alien2.move(alien2.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        this.aliens.push(alien2);
        const alien3 = new Alien3Class(this.gameService, this.ctx, boundary, 1);
        alien3.isDestroyed = true;
        alien3.move(alien3.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        this.aliens.push(alien3);
        const alien4 = new Alien4Class(this.gameService, this.ctx, boundary, 1);
        alien4.isDestroyed = true;
        alien4.move(alien4.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        this.aliens.push(alien4);
        const alien5 = new Alien5Class(this.gameService, this.ctx, boundary, 1);
        alien5.isDestroyed = true;
        alien5.move(alien5.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        this.aliens.push(alien5);
        const alien6 = new Alien6Class(this.gameService, this.ctx, boundary, 1);
        alien6.isDestroyed = true;
        alien6.move(alien6.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        this.aliens.push(alien6);
        this.alien = this.aliens[0];
        this.alien.isDestroyed = false;
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.alien.isDestroyed = false;
        this.alien.move(this.alien.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 5, 0.025);
    }
    animate(now = 0) {
        this.draw();
        this.alien.animate(now);
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    toggleAssets(key) {
        this.alien.isDestroyed = true;
        this.draw();
        let index = 0;
        this.aliens.map((alien) => {
            alien.isDestroyed = true;
        });
        this.assets.map((asset, $index) => {
            if (key === asset.key) {
                index = $index;
                this.gameCookieService.setDebugData({
                    secondaryAssetName: key
                });
            }
        });
        this.alien = this.aliens[index];
        this.animateAsset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: AlienComponent, deps: [{ token: GameService }, { token: GameCookieService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: AlienComponent, selector: "bp-alien", viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Alien</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{flex-wrap:wrap;font-size:16px;margin-top:10px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: AlienComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-alien', template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Alien</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{flex-wrap:wrap;font-size:16px;margin-top:10px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }, { type: GameCookieService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }] } });

const COLS$4 = 31;
const ROWS$4 = 31;
const BLOCK_SIZE$4 = 25;
const ASSET_ANIMATION_1$6 = [
    [4, 4],
    [4, 4],
    [4, 4],
    [4, 4],
    [4, 4]
];
const ASSET_ANIMATION$6 = [ASSET_ANIMATION_1$6];
const COLORS$4 = [
    'none',
    'rgba(255, 132, 0)',
    'rgba(255, 255, 0)',
    'rgba(255, 0, 0)',
    'rgba(255, 255, 255)'
];
let KEY$3 = class KEY {
    static { this.DOWN = 'ArrowDown'; }
};
const DESTRUCTION_ANIMATION_1$1 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 2, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION_2$1 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 3, 2, 1, 3, 0, 0, 0],
    [0, 0, 0, 0, 1, 2, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION_3$1 = [
    [0, 0, 1, 2, 3, 3, 2, 1, 0, 0],
    [0, 0, 0, 3, 2, 1, 3, 0, 0, 0],
    [0, 0, 0, 0, 1, 2, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION$1 = [DESTRUCTION_ANIMATION_1$1, DESTRUCTION_ANIMATION_2$1, DESTRUCTION_ANIMATION_3$1];

class BombClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
        this.moves = {
            [KEY$3.DOWN]: (asset) => ({ ...asset, y: asset.y + 5 })
        };
    }
    spawn() {
        this.assetAnimation = ASSET_ANIMATION$6[0];
        this.engineAnimation = [];
        this.destructionAnimations = DESTRUCTION_ANIMATION$1;
        this.destructionAnimation = this.destructionAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.scale(1, 1);
        this.drawBomb();
        this.ctx.restore();
    }
    drawBomb() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                this.ctx.fillStyle = COLORS$4[value];
                this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
            });
        });
    }
    drawBombDestruction() {
        this.destructionAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$4[value];
                    this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
                }
            });
        });
    }
    destructionAnimate(now = 0) {
        this.destructionTimer.elapsed = now - this.destructionTimer.start;
        if (this.destructionAnimationCounter === this.destructionAnimations.length) {
            cancelAnimationFrame(this.destructionRequestId);
            return;
        }
        if (this.destructionTimer.elapsed > 30) {
            this.destructionTimer.start = now;
            this.destructionAnimation =
                this.destructionAnimations[this.destructionAnimationCounter++ % this.destructionAnimations.length];
        }
        this.drawBombDestruction();
        this.destructionRequestId = requestAnimationFrame(this.destructionAnimate.bind(this));
    }
    animate(now = 0) {
        this.engineTimer.elapsed = now - this.engineTimer.start;
        this.destructionAnimationCounter = 0;
        if (this.engineTimer.elapsed > 75) {
            this.engineTimer.start = now;
            const asset = this.moves['ArrowDown'](this);
            if (this.gameService.valid(asset, this.boundary)) {
                this.move(asset);
            }
            else {
                this.destructionAnimate();
                this.isDestroyed = true;
            }
        }
        this.draw();
    }
}

class BombComponent {
    constructor(gameService) {
        this.gameService = gameService;
    }
    ngOnInit() {
        this.ctx = this.gameService.initBoard(this.canvas, COLS$4, ROWS$4, BLOCK_SIZE$4);
        const boundary = {
            x: 0,
            y: 0,
            height: ROWS$4,
            width: COLS$4
        };
        this.bomb = new BombClass(this.gameService, this.ctx, boundary, 0);
        this.bomb.move(this.bomb.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.top));
        this.isAnimateOnce = true;
        this.animate();
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.bomb.isDestroyed = false;
        this.bomb.move(this.bomb.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.top));
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 1, 0.025);
    }
    animate(now = 0) {
        this.draw();
        this.bomb.animate(now);
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    keyEvent(event) {
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.keyDownEvent,
            stringData: event.code
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: BombComponent, deps: [{ token: GameService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: BombComponent, selector: "bp-bomb", host: { listeners: { "window:keydown": "keyEvent($event)" } }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  Bomb\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n  </div>\n</div>\n", styles: [".game-container .header{display:grid;grid-template-columns:200px auto 200px;height:25px}.game-container .header .game-title{text-align:center;border:1px solid black}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: BombComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-bomb', template: "<div class=\"game-container\">\n  Bomb\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n  </div>\n</div>\n", styles: [".game-container .header{display:grid;grid-template-columns:200px auto 200px;height:25px}.game-container .header .game-title{text-align:center;border:1px solid black}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }], keyEvent: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }] } });

const COLS$3 = 31;
const ROWS$3 = 31;
const BLOCK_SIZE$3 = 25;
const ASSET_ANIMATION_0 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_1$5 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_3 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_4 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
];
const ASSET_ANIMATION_5 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_6 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_7 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
];
const ASSET_ANIMATION_8 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
];
const ASSET_ANIMATION_9 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
];
const ASSET_ANIMATION$5 = [
    ASSET_ANIMATION_0,
    ASSET_ANIMATION_1$5,
    ASSET_ANIMATION_2,
    ASSET_ANIMATION_3,
    ASSET_ANIMATION_4,
    ASSET_ANIMATION_5,
    ASSET_ANIMATION_6,
    ASSET_ANIMATION_7,
    ASSET_ANIMATION_8,
    ASSET_ANIMATION_9
];
const COLORS$3 = [
    'rgba(0,0, 0)',
    'rgba(73, 112, 79)',
    'rgba(139, 123, 92)'
];

class NumberClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, color) {
        super(gameService, ctx, boundarySetup, 0);
        this.color = color;
        this.numbers = [];
    }
    spawn() {
        this.assetAnimation = ASSET_ANIMATION$5[0];
        this.engineAnimation = [];
        this.destructionAnimations = [];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.ctx.scale(2, 2);
        this.drawNumber();
        this.ctx.restore();
    }
    drawNumber() {
        let offset = 0;
        this.ctx.fillStyle = COLORS$3[this.color];
        this.numbers.map((scoreNumber) => {
            this.assetAnimation = ASSET_ANIMATION$5[scoreNumber];
            this.assetAnimation.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value > 0) {
                        this.ctx.fillRect(x + offset, y, 1, 1);
                    }
                });
            });
            offset += 10;
        });
    }
    padPoints(points) {
        let stringPoints = points.toString();
        if (points < 10) {
            stringPoints = `000${points}`;
        }
        else if (points < 100) {
            stringPoints = `00${points}`;
        }
        else if (points < 1000) {
            stringPoints = `0${points}`;
        }
        return stringPoints;
    }
    setNumber(inputNumber, isPadNumber = true) {
        const numbers = isPadNumber ? this.padPoints(inputNumber) : [inputNumber];
        this.numbers = [];
        for (const index of numbers) {
            this.numbers.push(Number(index));
        }
    }
    animate() {
        this.draw();
    }
}

class TextService {
    constructor(gameService, ctx, boundary) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.scoreClass = new NumberClass(this.gameService, this.ctx, boundary, 1);
        this.highScoreClass = new NumberClass(this.gameService, this.ctx, boundary, 2);
        this.isDisplayed = true;
        this.scoreClass.move({
            x: 160,
            y: 0
        });
        this.highScoreClass.move({
            x: 20,
            y: 0
        });
        this.gameService.getMasterObservable().subscribe((resultModel) => {
            if (resultModel.type === ObservableTypeEnum.displayScore) {
                this.isDisplayed = resultModel.booleanData;
            }
            else if (resultModel.type === ObservableTypeEnum.gameStarted) {
                this.isDisplayed = true;
            }
        });
    }
    animate() {
        if (!this.isDisplayed) {
            return;
        }
        this.scoreClass.animate();
        this.highScoreClass.animate();
    }
    setScore(points) {
        this.scoreClass.setNumber(points);
    }
    setHighScore(points) {
        this.highScoreClass.setNumber(points);
    }
    displayText(text, fontColor, leftOffset) {
        const gameboard = this.gameService.getGameboard();
        this.ctx.fillStyle = 'black';
        const gameOverBoxWidth = 100;
        const gameOverBoxHeight = 50;
        const gameOverXCenter = (gameboard.width - gameOverBoxWidth) / 2;
        const gameOverYCenter = (gameboard.height - gameOverBoxHeight) / 2;
        this.ctx.fillRect(gameOverXCenter, gameOverYCenter, gameOverBoxWidth, gameOverBoxHeight);
        this.ctx.font = '10px "Press Start 2P", cursive';
        this.ctx.fillStyle = fontColor;
        this.ctx.fillText(text, gameOverXCenter + leftOffset, gameOverYCenter + 30);
    }
}

class InvasionService extends AssetClass {
    constructor(gameService, ctx, boundary) {
        super(gameService, ctx, boundary, 0);
        this.aliens = [];
        this.isAlienCreepLeft = true;
        this.xAlienDelta = -10;
        this.isBossing = false;
        this.displayElapseTime = 0;
        this.isGameStarted = false;
        this.setup();
        this.gameService.getMasterObservable().subscribe((resultModel) => {
            if (resultModel.type === ObservableTypeEnum.gameStarted) {
                this.isGameStarted = resultModel.booleanData;
                if (resultModel.booleanData === false) {
                    this.alienBoss.isDestroyed = true;
                    this.isBossing = false;
                }
            }
            else if (resultModel.type === ObservableTypeEnum.gamePaused && !resultModel.booleanData) {
                this.setAlienBossDisplayElapseTime();
            }
            else if (resultModel.type === ObservableTypeEnum.alienBossDestroyed) {
                this.toggleScore(true);
                this.isBossing = false;
                this.alienBoss.isDestroyed = true;
                this.setAlienBossDisplayElapseTime();
            }
            else if (resultModel.type === ObservableTypeEnum.alienDestroyed) {
                this.aliens[resultModel.numberData].isDestroyed = true;
                this.aliens[resultModel.numberData].canFireWeapon = false;
                this.findNextBombingAlien(resultModel.numberData);
            }
        });
    }
    spawn() {
        this.assetAnimation = [[0]];
        this.engineAnimation = [];
        super.spawn();
    }
    setup() {
        let alienRowCounter = 0;
        Array(ALIEN_ROWS)
            .fill(0)
            .map(() => {
            Array(ALIEN_COLUMNS)
                .fill(0)
                .map(() => {
                if (alienRowCounter === 1) {
                    this.aliens.push(new Alien2Class(this.gameService, this.ctx, this.boundarySetup, this.aliens.length));
                }
                else if (alienRowCounter === 2) {
                    this.aliens.push(new Alien3Class(this.gameService, this.ctx, this.boundarySetup, this.aliens.length));
                }
                else if (alienRowCounter === 3) {
                    this.aliens.push(new Alien4Class(this.gameService, this.ctx, this.boundarySetup, this.aliens.length));
                }
                else if (alienRowCounter === 4) {
                    this.aliens.push(new Alien5Class(this.gameService, this.ctx, this.boundarySetup, this.aliens.length));
                }
                else if (alienRowCounter === 5) {
                    this.aliens.push(new Alien6Class(this.gameService, this.ctx, this.boundarySetup, this.aliens.length));
                }
                else {
                    this.aliens.push(new Alien1Class(this.gameService, this.ctx, this.boundarySetup, this.aliens.length));
                }
            });
            alienRowCounter++;
        });
        this.alienBoss = new AlienBoss2Class(this.gameService, this.ctx, {
            x: this.boundarySetup.x - 15,
            y: 0,
            height: 20,
            width: this.boundarySetup.width + 20
        }, 0);
        this.aliens.push(this.alienBoss);
    }
    toggleScore(displayScore) {
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.displayScore,
            booleanData: displayScore
        });
    }
    findNextBombingAlien(alienPosition) {
        const alienColumnIndex = alienPosition % ALIEN_COLUMNS;
        const startingPosition = this.aliens.length - 1 - (ALIEN_COLUMNS - alienColumnIndex);
        for (let index = startingPosition; index > 0; index -= ALIEN_COLUMNS) {
            if (!this.aliens[index].isDestroyed) {
                this.aliens[index].canFireWeapon = true;
                return;
            }
        }
    }
    aliensDestroyed() {
        return this.getActiveAliens().length === 0;
    }
    setupInvasion(yStart) {
        const xStart = 60;
        const xSpacer = 24;
        const ySpacer = 20;
        let xValue = 0;
        let yValue = 0;
        this.aliens.map((alien) => {
            alien.isDestroyed = false;
            alien.move({
                x: xValue++ * xSpacer + xStart,
                y: yValue * ySpacer + yStart
            });
            alien.canFireWeapon = false;
            if (yValue === ALIEN_ROWS - 1) {
                alien.canFireWeapon = true;
            }
            if (xValue % ALIEN_COLUMNS === 0) {
                yValue++;
                xValue = 0;
            }
        });
        const asset = this.alienBoss.positionAsset(AssetAlignEnum.right, AssetAlignVerticalEnum.top);
        this.alienBoss.move(asset);
    }
    splat() {
        let isGameOver = false;
        this.aliens
            .filter((alien) => !alien.isDestroyed)
            .map((alien) => {
            if (alien.y + alien.getAssetHeight() >= this.boundary.floor) {
                isGameOver = true;
            }
        });
        return isGameOver;
    }
    getAllActiveAliens() {
        return this.aliens.filter((alien) => alien.isDestroyed === false);
    }
    getActiveAliens() {
        return this.aliens.filter((alien) => alien.isDestroyed === false && alien.isAlien());
    }
    increaseInvasionSpeed(creepSpeed) {
        const totalAliens = this.getActiveAliens().length;
        if (totalAliens < 20 && totalAliens > 15 && creepSpeed < 2) {
            return true;
        }
        else if (totalAliens < 15 && totalAliens > 10 && creepSpeed < 3) {
            return true;
        }
        else if (totalAliens < 10 && totalAliens > 5 && creepSpeed < 4) {
            return true;
        }
        else if (totalAliens < 4 && totalAliens > 1 && creepSpeed < 5) {
            return true;
        }
        else if (totalAliens === 1 && creepSpeed < 6) {
            return true;
        }
        return false;
    }
    dropAliens() {
        this.isAlienCreepLeft = !this.isAlienCreepLeft;
        let lastAlien;
        this.getActiveAliens().map((alien) => {
            alien.move({
                x: alien.x,
                y: (alien.y += 10)
            });
            lastAlien = alien;
        });
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.alienDrop,
            numberData: lastAlien.y + lastAlien.getAssetHeight()
        });
    }
    moveAliens() {
        let creepSucceeded = true;
        this.getActiveAliens().map((alien) => {
            creepSucceeded =
                creepSucceeded &&
                    alien.creep({
                        x: alien.x + this.xAlienDelta,
                        y: alien.y
                    });
        });
        if (creepSucceeded) {
            this.getActiveAliens().map((alien) => {
                alien.move({
                    x: alien.x + this.xAlienDelta,
                    y: alien.y
                });
            });
        }
        else {
            this.dropAliens();
        }
        this.xAlienDelta = this.isAlienCreepLeft ? -10 : 10;
    }
    animate(now, creepSpeedLevel) {
        this.assetTimer.elapsed = now - this.assetTimer.start;
        if (this.assetTimer.elapsed > creepSpeedLevel) {
            this.assetTimer.start = now;
            this.moveAliens();
        }
        if (this.isBossing) {
            this.alienBoss.animate(now);
        }
        this.getActiveAliens().map((alien) => {
            alien.animate(now);
        });
    }
    resetAlienCreep() {
        this.toggleScore(true);
        this.isBossing = false;
        this.xAlienDelta = -10;
        this.isAlienCreepLeft = true;
        this.setAlienBossDisplayElapseTime();
    }
    setAlienBossDisplayElapseTime() {
        clearTimeout(this.timerId);
        if (!this.isGameStarted || this.isBossing) {
            return;
        }
        this.displayElapseTime = Math.floor(Math.random() * 20000 + 1000);
        this.timerId = window.setTimeout(() => {
            this.isBossing = true;
            this.toggleScore(false);
            this.alienBoss.positionAlienBoss();
        }, this.displayElapseTime);
    }
}

class MoonService {
    constructor(ctx, boundary) {
        this.ctx = ctx;
        this.boundary = boundary;
        this.leftBoundary = this.boundary.x + 40;
        this.rightBoundary = this.boundary.width - 80 + this.leftBoundary;
        this.boundaryStakeWidth = 5;
        this.boundaryStakeHeight = this.boundary.height / 2;
    }
    drawTheMoon() {
        this.ctx.fillStyle = 'rgba(34, 65, 4)';
        this.ctx.fillRect(this.boundary.x, this.boundary.y, this.boundary.width, this.boundary.height);
        this.ctx.fillStyle = 'rgba(8, 136, 23)';
        this.ctx.fillRect(this.leftBoundary - this.boundaryStakeWidth, this.boundary.y, this.boundaryStakeWidth, this.boundaryStakeHeight);
        this.ctx.fillStyle = 'rgba(200, 95, 36)';
        this.ctx.fillRect(this.rightBoundary, this.boundary.y, this.boundaryStakeWidth, this.boundaryStakeHeight);
    }
    animate() {
        this.drawTheMoon();
    }
    getMoonTop() {
        return this.boundary.y;
    }
    getMoonLeftBoundary() {
        return this.leftBoundary - 1;
    }
    getMoonRightBoundary() {
        return this.rightBoundary + 1;
    }
}

const COLS$2 = 31;
const ROWS$2 = 31;
const BLOCK_SIZE$2 = 25;
const ASSET_ANIMATION_1$4 = [
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]
];
const ASSET_ANIMATION$4 = [ASSET_ANIMATION_1$4];
const COLORS$2 = [
    'none',
    'rgba(223, 37, 28)'
];
let KEY$2 = class KEY {
    static { this.DOWN = 'ArrowDown'; }
};

class MoonDefenseClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
    }
    spawn() {
        this.restore();
        super.spawn();
    }
    restore() {
        this.assetAnimation = JSON.parse(JSON.stringify(ASSET_ANIMATION$4[0]));
        this.engineAnimation = [];
        super.restore();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawMoonDefense();
        this.ctx.restore();
    }
    drawMoonDefense() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$2[value];
                    this.ctx.fillRect(x, y, 1, 1);
                }
            });
        });
    }
    isHitBomb(bombAsset) {
        if (!this.isDestroyed) {
            const defenseHit = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, bombAsset);
            if (defenseHit) {
                const assetX = Math.round(bombAsset.x - this.x);
                let rowHit = -1;
                for (let y = 0; y < this.getAssetHeight(); y++) {
                    if (this.assetAnimation[y][assetX] > 0) {
                        rowHit = y;
                        break;
                    }
                }
                for (let y = rowHit; y < rowHit + bombAsset.shape.length; y++) {
                    const row = this.assetAnimation[y];
                    if (row) {
                        const nextColumn = assetX + 1;
                        this.assetAnimation[y][assetX] = 0;
                        this.assetAnimation[y][nextColumn] = 0;
                        this.shape[y][assetX] = 0;
                        this.shape[y][nextColumn] = 0;
                    }
                    else {
                        break;
                    }
                }
                bombAsset.isDestroyed = true;
                let counter = 0;
                this.assetAnimation.map((row) => {
                    row.map((value) => {
                        counter += value;
                    });
                });
                this.isDestroyed = counter === 0;
            }
        }
    }
    isHitMissile(missileAsset) {
        if (!this.isDestroyed) {
            const defenseHit = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, missileAsset);
            if (defenseHit) {
                const assetX = Math.round(missileAsset.x - this.x);
                let rowHit = -1;
                for (let y = this.getAssetHeight() - 1; y >= 0; y--) {
                    if (this.assetAnimation[y][assetX] > 0) {
                        rowHit = y;
                        break;
                    }
                }
                for (let y = rowHit; y > rowHit - missileAsset.shape.length; y--) {
                    const row = this.assetAnimation[y];
                    if (row) {
                        const nextColumn = assetX + 1;
                        this.assetAnimation[y][assetX] = 0;
                        this.assetAnimation[y][nextColumn] = 0;
                        this.shape[y][assetX] = 0;
                        this.shape[y][nextColumn] = 0;
                    }
                    else {
                        break;
                    }
                }
                missileAsset.isDestroyed = true;
                let counter = 0;
                this.assetAnimation.map((row) => {
                    row.map((value) => {
                        counter += value;
                    });
                });
                this.isDestroyed = counter === 0;
            }
        }
    }
    animate() {
        if (this.isDestroyed || this.isGameOver) {
            this.gameService.emitMasterObservableEvent({
                type: ObservableTypeEnum.moonDefenseDestroyed,
                numberData: this.uid
            });
            return;
        }
        this.draw();
    }
}

class MoonDefenseService {
    constructor(gameService, ctx, boundary) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundary = boundary;
        this.moonDefenses = [];
        this.setUp();
        this.gameService.getMasterObservable().subscribe((resultModel) => {
            if (resultModel.type === ObservableTypeEnum.moonDefenseDestroyed) {
                this.moonDefenses[resultModel.numberData].isDestroyed = true;
            }
            else if (resultModel.type === ObservableTypeEnum.alienDrop) {
                this.aliensDestroyedMoonbase(resultModel.numberData);
            }
        });
    }
    aliensDestroyedMoonbase(alienYPosition) {
        const moonbase = this.getActiveMoonBases().pop();
        if (moonbase && alienYPosition > moonbase.y) {
            this.getActiveMoonBases().map((moonDefense) => {
                moonDefense.isDestroyed = true;
            });
        }
    }
    setUp() {
        Array(3)
            .fill(0)
            .map(() => {
            this.moonDefenses.push(new MoonDefenseClass(this.gameService, this.ctx, this.boundary, this.moonDefenses.length));
        });
    }
    setupMoonBase(isReset, spaceshipYPosition) {
        this.moonDefenses.map((moonDefense, index) => {
            moonDefense.isDestroyed = false;
            if (isReset) {
                moonDefense.restore();
            }
            let moonAsset = moonDefense.positionAsset(AssetAlignEnum.leftFourth, AssetAlignVerticalEnum.middle);
            if (index === 1) {
                moonAsset = moonDefense.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle);
            }
            else if (index === 2) {
                moonAsset = moonDefense.positionAsset(AssetAlignEnum.rightFourth, AssetAlignVerticalEnum.middle);
            }
            moonDefense.move({
                x: moonAsset.x,
                y: spaceshipYPosition - moonDefense.getAssetHeight()
            });
        });
    }
    getActiveMoonBases() {
        return this.moonDefenses.filter((moonDefense) => !moonDefense.isDestroyed);
    }
    animate() {
        this.getActiveMoonBases().map((moonDefense) => {
            moonDefense.animate();
        });
    }
}

const ASSET_ANIMATION_1$3 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0],
    [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0],
    [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0],
    [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0]
];
const ASSET_ANIMATION$3 = [ASSET_ANIMATION_1$3];

const COLS$1 = 31;
const ROWS$1 = 31;
const BLOCK_SIZE$1 = 25;
const COLORS$1 = [
    'none',
    'rgba(255, 132, 0)',
    'rgba(255, 255, 0)',
    'rgba(255, 0, 0)',
    'rgba(255, 255, 255)',
    'rgba(8, 136, 23)'
];
let KEY$1 = class KEY {
    static { this.SPACE = 'Space'; }
    static { this.LEFT = 'ArrowLeft'; }
    static { this.RIGHT = 'ArrowRight'; }
};
const DESTRUCTION_ANIMATION_1 = [
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],
    [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
    [0, 0, 2, 3, 2, 0, 2, 0, 0, 0],
    [0, 0, 2, 0, 2, 2, 3, 2, 0, 0],
    [0, 0, 0, 2, 3, 2, 2, 0, 0, 0],
    [0, 0, 2, 3, 2, 2, 0, 2, 0, 0],
    [0, 0, 2, 0, 2, 3, 2, 2, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 2]
];
const DESTRUCTION_ANIMATION_2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 2, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 3, 0, 2, 3, 0, 0, 0],
    [0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 3, 0, 2, 2, 0, 0, 0],
    [0, 0, 2, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION_3 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 3, 0, 2, 0, 0, 0, 0],
    [0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const DESTRUCTION_ANIMATION = [DESTRUCTION_ANIMATION_1, DESTRUCTION_ANIMATION_2, DESTRUCTION_ANIMATION_3];

class SpaceshipClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, isPrimary) {
        super(gameService, ctx, boundarySetup, 0);
        this.isPrimary = isPrimary;
        this.moves = {
            [KEY$1.LEFT]: (asset) => ({ ...asset, x: asset.x - 3 }),
            [KEY$1.RIGHT]: (asset) => ({ ...asset, x: asset.x + 3 }),
            [KEY$1.SPACE]: true
        };
        this.missileFired = false;
        this.missileTimer = {
            start: performance.now(),
            elapsed: 0
        };
    }
    keyDownMove(eventCode) {
        const asset = this.moves[eventCode](this);
        if (this.gameService.valid(asset, this.boundary)) {
            this.move(asset);
        }
        else {
            clearInterval(this.keyDownInterval);
            this.keyDownInterval = undefined;
        }
    }
    processKeyStroke(event) {
        if (this.isPrimary) {
            const eventCode = event.stringData;
            const keyDown = event.type === ObservableTypeEnum.keyDownEvent;
            if (this.moves[eventCode]) {
                if (eventCode === KEY$1.SPACE && keyDown) {
                    this.missileFired = true;
                }
                else {
                    if ((keyDown && this.currentKeyDown !== eventCode) || (!keyDown && this.currentKeyDown === eventCode)) {
                        clearInterval(this.keyDownInterval);
                        this.keyDownInterval = undefined;
                        this.currentKeyDown = undefined;
                    }
                    if (keyDown && this.currentKeyDown !== eventCode) {
                        this.currentKeyDown = eventCode;
                        this.keyDownMove(eventCode);
                        this.keyDownInterval = window.setInterval(() => {
                            this.keyDownMove(eventCode);
                        }, 50);
                    }
                }
            }
        }
    }
    spawn() {
        this.assetAnimation = this.assetAnimations[0];
        this.engineAnimation = this.engineAnimations[0];
        this.destructionAnimations = DESTRUCTION_ANIMATION;
        this.destructionAnimation = this.destructionAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawSpaceship();
        this.drawEngine();
        this.ctx.restore();
    }
    drawSpaceship() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$1[value];
                    this.ctx.fillRect(x, y, 1, 1);
                }
            });
        });
    }
    drawEngine() {
        this.engineAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$1[value];
                    this.ctx.fillRect(this.x + this.engineXOffset + x, this.y + this.engineYOffset + y, 1, 1);
                }
            });
        });
    }
    isHit(alienBombAsset) {
        if (!this.isDestroyed) {
            this.isDestroyed = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, alienBombAsset);
            if (this.isDestroyed) {
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.spaceshipDestroyed,
                    booleanData: true
                });
                alienBombAsset.isDestroyed = true;
            }
        }
    }
    drawSpaceshipDestruction() {
        this.destructionAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS$1[value];
                    this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
                }
            });
        });
    }
    destructionAnimate(now = 0) {
        this.ctx.clearRect(this.x - 10, this.y, this.getAssetWidth() + 20, this.getAssetHeight());
        this.destructionTimer.elapsed = now - this.destructionTimer.start;
        if (this.destructionAnimationCounter === this.destructionAnimations.length) {
            cancelAnimationFrame(this.destructionRequestId);
            return;
        }
        if (this.destructionTimer.elapsed > 50) {
            this.destructionTimer.start = now;
            this.destructionAnimation =
                this.destructionAnimations[this.destructionAnimationCounter++ % this.destructionAnimations.length];
        }
        this.drawSpaceshipDestruction();
        this.destructionRequestId = requestAnimationFrame(this.destructionAnimate.bind(this));
    }
    animate(now = 0) {
        this.assetTimer.elapsed = now - this.assetTimer.start;
        this.engineTimer.elapsed = now - this.engineTimer.start;
        this.missileTimer.elapsed = now - this.missileTimer.start;
        if (this.isDestroyed) {
            this.destructionAnimate();
            return;
        }
        this.destructionAnimationCounter = 0;
        if (this.assetTimer.elapsed > 1000) {
            this.assetTimer.start = now;
            this.assetAnimation = this.assetAnimations[this.animationCounter++ % this.assetAnimations.length];
        }
        if (this.missileTimer.elapsed > 500 && this.missileFired) {
            this.missileFired = false;
            this.missileTimer.start = now;
            this.gameService.emitMasterObservableEvent({
                type: ObservableTypeEnum.missileShot,
                assetCoordinateData: {
                    x: this.x + this.getAssetWidth() / 2 - 1,
                    y: this.y + 5
                }
            });
        }
        if (this.engineTimer.elapsed > 200 && this.engineAnimations.length > 0) {
            this.engineTimer.start = now;
            this.engineAnimation = this.engineAnimations[this.engineAnimationCounter++ % this.engineAnimations.length];
        }
        this.draw();
    }
}

class Spaceship2Class extends SpaceshipClass {
    constructor(gameService, ctx, boundarySetup, isPrimary) {
        super(gameService, ctx, boundarySetup, isPrimary);
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$3;
        this.engineAnimations = [[]];
        super.spawn();
    }
}

class SpaceshipService {
    constructor(gameService, ctx, boundary) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundary = boundary;
        this.spaceships = [];
        this.gameboardBottom = this.gameService.getGameboard().height;
        this.setUp();
        this.gameService.getMasterObservable().subscribe((resultModel) => {
            if (resultModel.type === ObservableTypeEnum.spaceshipDestroyed) {
                this.spaceship.isDestroyed = false;
                this.removeSpaceshipReserve();
            }
        });
    }
    setUp() {
        Array(2)
            .fill(0)
            .map(() => {
            this.spaceships.unshift(new Spaceship2Class(this.gameService, this.ctx, this.boundary, false));
        });
        let extraLivesX = 10;
        this.spaceships
            .filter((spaceship) => !spaceship.isDestroyed)
            .map((spaceship) => {
            spaceship.move({
                x: extraLivesX,
                y: this.gameboardBottom - spaceship.getAssetHeight()
            });
            extraLivesX += 20;
        });
        this.spaceship = new Spaceship2Class(this.gameService, this.ctx, this.boundary, true);
    }
    setupSpaceships() {
        this.spaceship.isDestroyed = false;
        const spaceshipAsset = this.gameService.positionAsset(this.spaceship, AssetAlignEnum.center, AssetAlignVerticalEnum.bottom);
        spaceshipAsset.y = this.boundary.height - this.spaceship.getAssetHeight();
        this.spaceship.move(spaceshipAsset);
        this.spaceships.map((spaceship) => {
            spaceship.isDestroyed = false;
        });
    }
    getSpaceshipYPosition() {
        return this.spaceship.y;
    }
    isHit(alienBombAsset) {
        this.spaceship.isHit(alienBombAsset);
    }
    getActiveSpaceshipReserves() {
        return this.spaceships.filter((spaceship) => !spaceship.isDestroyed);
    }
    removeSpaceshipReserve() {
        const reserves = this.getActiveSpaceshipReserves();
        if (reserves.length) {
            reserves[reserves.length - 1].isDestroyed = true;
        }
    }
    animate(now = 0) {
        this.getActiveSpaceshipReserves().map((spaceship) => {
            spaceship.animate(now);
        });
        this.spaceship.animate(now);
    }
}

const ASSET_ANIMATION_1$2 = [
    [4, 4],
    [4, 4],
    [4, 4],
    [4, 4],
    [4, 4]
];
const ASSET_ANIMATION$2 = [ASSET_ANIMATION_1$2];

const COLS = 31;
const ROWS = 31;
const BLOCK_SIZE = 25;
const COLORS = [
    'none',
    'rgba(255, 132, 0)',
    'rgba(255, 255, 0)',
    'rgba(255, 0, 0)',
    'rgba(255, 255, 255)'
];
class KEY {
    static { this.UP = 'ArrowUp'; }
}

class MissileClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
        this.moves = {
            [KEY.UP]: (asset) => ({ ...asset, y: asset.y - 5 })
        };
    }
    spawn() {
        this.assetAnimation = this.assetAnimations[0];
        this.engineAnimation = this.engineAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawMissile();
        this.drawEngine();
        this.ctx.restore();
    }
    drawMissile() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                this.ctx.fillStyle = COLORS[value];
                this.ctx.fillRect(x, y, 1, 1);
            });
        });
    }
    drawEngine() {
        this.engineAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                this.ctx.fillStyle = COLORS[value];
                this.ctx.fillRect(this.x + this.engineXOffset + x, this.y + this.engineYOffset + y, 1, 1);
            });
        });
    }
    animate(now = 0) {
        this.engineTimer.elapsed = now - this.engineTimer.start;
        if (this.engineTimer.elapsed > 30) {
            this.engineTimer.start = now;
            this.engineAnimation = this.engineAnimations[this.engineAnimationCounter++ % this.engineAnimations.length];
            const asset = this.moves['ArrowUp'](this);
            if (this.gameService.valid(asset, this.boundary)) {
                this.move(asset);
            }
            else {
                this.isDestroyed = true;
            }
        }
        this.draw();
    }
}

class Missile2Class extends MissileClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$2;
        this.engineAnimations = [[]];
        super.spawn();
    }
}

class ProjectileService {
    constructor(gameService, ctx, boundary) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundary = boundary;
        this.spaceshipMissiles = [];
        this.alienBombs = [];
        this.isGamePaused = false;
        this.init();
    }
    init() {
        this.gameService.getMasterObservable().subscribe((event) => {
            if (event.type === ObservableTypeEnum.missileShot) {
                this.launchMissile(event);
            }
            else if (event.type === ObservableTypeEnum.bombDropped) {
                this.dropBomb(event);
            }
            else if (event.type === ObservableTypeEnum.gamePaused) {
                this.isGamePaused = event.booleanData;
            }
        });
    }
    findUnusedMissile() {
        return this.spaceshipMissiles.filter((missile) => missile.isDestroyed)[0];
    }
    findUnusedBomb() {
        return this.alienBombs.filter((bomb) => bomb.isDestroyed)[0];
    }
    getActiveMissiles() {
        return this.spaceshipMissiles.filter((missile) => !missile.isDestroyed);
    }
    getActiveBombs() {
        return this.alienBombs.filter((bomb) => !bomb.isDestroyed);
    }
    removeProjectiles() {
        this.getActiveMissiles().map((missile) => {
            missile.isDestroyed = true;
        });
        this.getActiveBombs().map((bomb) => {
            bomb.isDestroyed = true;
        });
    }
    animate(now = 0) {
        if (!this.isGamePaused) {
            this.getActiveMissiles().map((missile) => {
                missile.animate(now);
            });
            this.getActiveBombs().map((bomb) => {
                bomb.animate(now);
            });
        }
    }
    launchMissile(event) {
        let missile = this.findUnusedMissile();
        if (!missile) {
            missile = new Missile2Class(this.gameService, this.ctx, this.boundary, this.spaceshipMissiles.length);
            this.spaceshipMissiles.push(missile);
        }
        missile.isDestroyed = false;
        missile.move(event.assetCoordinateData);
    }
    dropBomb(event) {
        let bomb = this.findUnusedBomb();
        if (!bomb) {
            bomb = new BombClass(this.gameService, this.ctx, this.boundary, this.alienBombs.length);
            this.alienBombs.push(bomb);
        }
        bomb.isDestroyed = false;
        bomb.move(event.assetCoordinateData);
    }
}

class GameboardComponent {
    constructor(gameCookieService, gameService) {
        this.gameCookieService = gameCookieService;
        this.gameService = gameService;
        this.isDisplayGrid = false;
        const gameData = this.gameCookieService.getGameData();
        this.highScore = gameData.highScore;
    }
    ngOnInit() {
        this.gameStarted = false;
        this.ctx = this.gameService.initBoard(this.canvas, COLS$6, ROWS$6, BLOCK_SIZE$6);
        this.moonService = new MoonService(this.ctx, {
            x: 0,
            y: ROWS$6 - MOON_HEIGHT * 2,
            height: MOON_HEIGHT,
            width: COLS$6
        });
        this.spaceshipService = new SpaceshipService(this.gameService, this.ctx, {
            x: this.moonService.getMoonLeftBoundary(),
            y: 0,
            height: this.moonService.getMoonTop(),
            width: this.moonService.getMoonRightBoundary()
        });
        const boundary = {
            x: 0,
            y: 0,
            height: this.moonService.getMoonTop(),
            width: COLS$6
        };
        this.moonDefenseService = new MoonDefenseService(this.gameService, this.ctx, boundary);
        this.projectileService = new ProjectileService(this.gameService, this.ctx, boundary);
        this.textService = new TextService(this.gameService, this.ctx, {
            x: 0,
            y: 0,
            height: LEVELHEIGHT[0],
            width: COLS$6
        });
        this.invasionService = new InvasionService(this.gameService, this.ctx, {
            x: 0,
            y: 0,
            height: this.moonService.getMoonTop(),
            width: COLS$6
        });
        this.gameService.getMasterObservable().subscribe((resultModel) => {
            if (resultModel.type === ObservableTypeEnum.alienBossDestroyed) {
                this.calculateScore(resultModel.pointData);
            }
            else if (resultModel.type === ObservableTypeEnum.alienDestroyed) {
                this.calculateScore(resultModel.pointData);
                if (this.invasionService.aliensDestroyed()) {
                    setTimeout(() => {
                        this.nextLevel();
                    }, 1000);
                }
            }
            else if (resultModel.type === ObservableTypeEnum.spaceshipDestroyed) {
                this.gameOver(false);
            }
        });
        this.resetGame();
        this.startAllAnimation();
    }
    calculateScore(score) {
        this.points += score;
        if (this.points > this.highScore) {
            this.highScore = this.points;
            this.textService.setHighScore(this.highScore);
        }
        this.textService.setScore(this.points);
    }
    setGameBoard(isReset) {
        this.invasionService.setupInvasion(LEVELHEIGHT[this.creepLevel]);
        this.spaceshipService.setupSpaceships();
        this.moonDefenseService.setupMoonBase(isReset, this.spaceshipService.getSpaceshipYPosition());
    }
    splat() {
        if (this.invasionService.splat()) {
            this.gameOver(true);
        }
    }
    evaluateDamage() {
        this.projectileService.getActiveBombs().map((bomb) => {
            this.spaceshipService.isHit(bomb);
            this.moonDefenseService.getActiveMoonBases().map((moonDefense) => {
                moonDefense.isHitBomb(bomb);
            });
        });
        this.projectileService.getActiveMissiles().map((missile) => {
            this.invasionService.getAllActiveAliens().map((alien) => {
                alien.isHit(missile);
            });
            this.moonDefenseService.getActiveMoonBases().map((moonDefense) => {
                moonDefense.isHitMissile(missile);
            });
        });
        if (this.invasionService.increaseInvasionSpeed(this.creepSpeed)) {
            this.creepSpeedLevel = LEVELSPEED[this.creepSpeed++];
        }
    }
    startAllAnimation() {
        this.draw();
        this.invasionService.animate(0, 1);
        this.moonDefenseService.animate();
        this.spaceshipService.animate();
        this.textService.animate();
    }
    animate(now = 0) {
        this.evaluateDamage();
        this.splat();
        if (this.isGameOver || this.isGamePaused) {
            return;
        }
        this.draw();
        this.invasionService.animate(now, this.creepSpeedLevel);
        this.moonDefenseService.animate();
        this.projectileService.animate(now);
        this.spaceshipService.animate(now);
        this.textService.animate();
        this.requestId = requestAnimationFrame(this.animate.bind(this));
    }
    lifeLost() {
        this.pauseGame('READY ?', 17);
        setTimeout(() => {
            this.removeWeapons();
            this.pauseGame('', 0);
        }, 2000);
    }
    gameOver(isReset = false) {
        this.lives += isReset ? 3 : 1;
        if (this.points >= this.highScore) {
            this.gameCookieService.setGameData({
                highScore: this.highScore
            });
        }
        if (this.lives < 3) {
            this.lifeLost();
        }
        else {
            this.removeWeapons();
            setTimeout(() => {
                this.isGameOver = true;
                this.gameStarted = false;
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.gameStarted,
                    booleanData: false
                });
                cancelAnimationFrame(this.requestId);
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.gameOver,
                    booleanData: true
                });
                this.textService.displayText('GAME OVER', 'red', 5);
            }, 250);
        }
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        if (this.isDisplayGrid) {
            this.gameService.addOutlines(this.ctx, 20, 0.2);
        }
        this.moonService.animate();
    }
    handleEventListeners(type, code) {
        if (this.gameStarted && !this.isGamePaused) {
            this.gameService.emitMasterObservableEvent({
                type,
                stringData: code
            });
        }
    }
    keyDownEvent(event) {
        event.preventDefault();
        this.handleEventListeners(ObservableTypeEnum.keyDownEvent, event.code);
    }
    keyUpEvent(event) {
        event.preventDefault();
        this.handleEventListeners(ObservableTypeEnum.keyUpEvent, event.code);
    }
    play() {
        this.gameStarted = true;
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.gameStarted,
            booleanData: true
        });
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.gameOver,
            booleanData: false
        });
        this.resetGame();
        if (this.requestId) {
            cancelAnimationFrame(this.requestId);
        }
        this.animate();
    }
    newLevelSetup(isReset = false) {
        if (this.creepLevel < 8) {
            this.creepLevel++;
        }
        this.creepSpeed = 0;
        this.creepSpeedLevel = LEVELSPEED[this.creepSpeed++];
        this.invasionService.resetAlienCreep();
        this.setGameBoard(isReset);
        if (this.creepLevel > 4) {
            this.gameService.emitMasterObservableEvent({
                type: ObservableTypeEnum.alienDrop,
                numberData: ROWS$6 * BLOCK_SIZE$6
            });
        }
    }
    removeWeapons() {
        this.projectileService.removeProjectiles();
    }
    nextLevel() {
        this.gameLevel++;
        this.pauseGame('LEVEL UP', 12);
        setTimeout(() => {
            this.removeWeapons();
            this.newLevelSetup();
            this.pauseGame('', 0);
        }, 2000);
    }
    resetGame() {
        this.lives = 0;
        this.creepLevel = -1;
        this.points = 0;
        this.gameLevel = 1;
        this.textService.setScore(this.points);
        this.textService.setHighScore(this.highScore);
        this.isGameOver = false;
        this.isGamePaused = false;
        this.spaceshipService.setupSpaceships();
        this.newLevelSetup(true);
    }
    pauseGame(text, textOffset) {
        if (this.gameStarted) {
            this.isGamePaused = !this.isGamePaused;
            if (this.isGamePaused) {
                cancelAnimationFrame(this.requestId);
                this.textService.displayText(text, 'white', textOffset);
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.gamePaused,
                    booleanData: true
                });
            }
            else {
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.gamePaused,
                    booleanData: false
                });
                this.animate();
            }
        }
    }
    pause() {
        this.pauseGame('PAUSED', 20);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameboardComponent, deps: [{ token: GameCookieService }, { token: GameService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: GameboardComponent, selector: "bp-gameboard", host: { listeners: { "window:keydown": "keyDownEvent($event)", "window:keyup": "keyUpEvent($event)" } }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"play()\" class=\"play-button button\" *ngIf=\"!gameStarted\">Play</button>\n    <button (click)=\"gameOver(true)\" class=\"reset-button button\" *ngIf=\"gameStarted\">Reset</button>\n    <button (click)=\"pause()\" class=\"pause-button button\" [class.button-disabled]=\"!gameStarted\">Pause</button>\n  </div>\n</div>\n", styles: [".game-container{background-color:#000;padding:10px}.game-container .game-board-container{position:relative;margin:auto;display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .play-button{background-color:#4caf50}.game-container .button-container .reset-button{background-color:red}.game-container .button-container .pause-button{margin-left:25px;background-color:#4caf50}.game-container .button-container .pause-button.button-disabled{background-color:#ccc}.game-container .button-container .button{font-size:16px;font-family:\"Press Start 2P\";padding:15px 30px;cursor:pointer;width:140px;border:1px solid black}\n", "@font-face{font-family:\"Press Start 2P\";src:local(\"Press Start 2P Regular\"),local(\"PressStart2P-Regular\"),url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\");font-weight:400;font-style:normal}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameboardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-gameboard', template: "<div class=\"game-container\">\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"play()\" class=\"play-button button\" *ngIf=\"!gameStarted\">Play</button>\n    <button (click)=\"gameOver(true)\" class=\"reset-button button\" *ngIf=\"gameStarted\">Reset</button>\n    <button (click)=\"pause()\" class=\"pause-button button\" [class.button-disabled]=\"!gameStarted\">Pause</button>\n  </div>\n</div>\n", styles: [".game-container{background-color:#000;padding:10px}.game-container .game-board-container{position:relative;margin:auto;display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .play-button{background-color:#4caf50}.game-container .button-container .reset-button{background-color:red}.game-container .button-container .pause-button{margin-left:25px;background-color:#4caf50}.game-container .button-container .pause-button.button-disabled{background-color:#ccc}.game-container .button-container .button{font-size:16px;font-family:\"Press Start 2P\";padding:15px 30px;cursor:pointer;width:140px;border:1px solid black}\n", "@font-face{font-family:\"Press Start 2P\";src:local(\"Press Start 2P Regular\"),local(\"PressStart2P-Regular\"),url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\");font-weight:400;font-style:normal}\n"] }]
        }], ctorParameters: () => [{ type: GameCookieService }, { type: GameService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }], keyDownEvent: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }], keyUpEvent: [{
                type: HostListener,
                args: ['window:keyup', ['$event']]
            }] } });

const ASSET_ANIMATION_1$1 = [[4], [4], [4]];
const ASSET_ANIMATION$1 = [ASSET_ANIMATION_1$1];
const ENGINE_ANIMATION_1$1 = [[1]];
const ENGINE_ANIMATION_2$1 = [[2]];
const ENGINE_ANIMATION_3$1 = [[3]];
const ENGINE_ANIMATION$1 = [ENGINE_ANIMATION_1$1, ENGINE_ANIMATION_2$1, ENGINE_ANIMATION_3$1];

class Missile1Class extends MissileClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION$1;
        this.engineAnimations = ENGINE_ANIMATION$1;
        super.spawn();
    }
}

class MissileComponent {
    constructor(gameService) {
        this.gameService = gameService;
    }
    ngOnInit() {
        this.ctx = this.gameService.initBoard(this.canvas, COLS, ROWS, BLOCK_SIZE);
        const boundary = {
            x: 0,
            y: 0,
            height: ROWS,
            width: COLS
        };
        this.missile = new Missile1Class(this.gameService, this.ctx, boundary, 0);
        this.missile.move(this.missile.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.bottom));
        this.isAnimateOnce = true;
        this.animate();
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.missile.isDestroyed = false;
        this.missile.move(this.missile.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 1, 0.025);
    }
    animate(now = 0) {
        this.draw();
        this.missile.animate(now);
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MissileComponent, deps: [{ token: GameService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: MissileComponent, selector: "bp-missile", viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  Missile\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n  </div>\n</div>\n", styles: [".game-container .header{display:grid;grid-template-columns:200px auto 200px;height:25px}.game-container .header .game-title{text-align:center;border:1px solid black}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MissileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-missile', template: "<div class=\"game-container\">\n  Missile\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n  </div>\n</div>\n", styles: [".game-container .header{display:grid;grid-template-columns:200px auto 200px;height:25px}.game-container .header .game-title{text-align:center;border:1px solid black}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }] } });

class MoonDefenseComponent {
    constructor(gameService) {
        this.gameService = gameService;
    }
    ngOnInit() {
        this.ctx = this.gameService.initBoard(this.canvas, COLS$2, ROWS$2, BLOCK_SIZE$2);
        const boundary = {
            x: 0,
            y: 0,
            height: ROWS$2,
            width: COLS$2
        };
        this.defense = new MoonDefenseClass(this.gameService, this.ctx, boundary, 0);
        this.defense.move(this.defense.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        this.isAnimateOnce = true;
        this.animate();
        this.defense.isAnimateOnce = true;
        this.defense.animate();
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.defense.isAnimateOnce = this.isAnimateOnce;
        this.defense.isDestroyed = false;
        this.defense.move(this.defense.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        cancelAnimationFrame(this.requestId);
        this.animate();
        this.defense.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 1, 0.025);
    }
    animate() {
        this.draw();
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MoonDefenseComponent, deps: [{ token: GameService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: MoonDefenseComponent, selector: "bp-moon-defense", viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Moon Defense</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MoonDefenseComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-moon-defense', template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Moon Defense</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:center}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }] } });

class NumberComponent {
    constructor(gameService, gameCookieService) {
        this.gameService = gameService;
        this.gameCookieService = gameCookieService;
        this.assets = [
            {
                key: 'zero',
                name: '0'
            },
            {
                key: 'one',
                name: '1'
            },
            {
                key: 'two',
                name: '2'
            },
            {
                key: 'three',
                name: '3'
            },
            {
                key: 'four',
                name: '4'
            },
            {
                key: 'five',
                name: '5'
            },
            {
                key: 'six',
                name: '6'
            },
            {
                key: 'seven',
                name: '7'
            },
            {
                key: 'eight',
                name: '8'
            },
            {
                key: 'nine',
                name: '9'
            }
        ];
    }
    ngOnInit() {
        const rows = 20;
        const columns = 20;
        this.ctx = this.gameService.initBoard(this.canvas, rows, columns, 25);
        this.addNumber({
            x: 0,
            y: 0,
            height: rows,
            width: columns
        });
        this.isAnimateOnce = true;
        this.toggleAssets(this.gameCookieService.getSecondaryDebugData());
        this.animate();
    }
    addNumber(boundary) {
        const number = new NumberClass(this.gameService, this.ctx, boundary, 1);
        number.setNumber(0, false);
        number.isDestroyed = true;
        number.isAnimateOnce = true;
        this.number = number;
    }
    animateAsset() {
        this.number.isDestroyed = false;
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 5, 0.025);
    }
    animate() {
        this.draw();
        this.number.animate();
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    toggleAssets(key) {
        this.draw();
        this.assets.map((asset, $index) => {
            if (key === asset.key) {
                this.number.setNumber($index, false);
                this.gameCookieService.setDebugData({
                    secondaryAssetName: key
                });
            }
        });
        this.animateAsset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: NumberComponent, deps: [{ token: GameService }, { token: GameCookieService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: NumberComponent, selector: "bp-number", viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Numbers</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{flex-wrap:wrap;font-size:16px;margin-top:10px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: NumberComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-number', template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Numbers</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{flex-wrap:wrap;font-size:16px;margin-top:10px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }, { type: GameCookieService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }] } });

const ASSET_ANIMATION_1 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 4, 4, 4, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 4, 0, 4, 4, 3, 4, 4, 0, 4, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 4, 4, 4, 3, 3, 3, 4, 4, 4, 0, 0, 1, 0, 0],
    [0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0],
    [0, 0, 4, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 0, 4, 4, 4, 0, 0],
    [0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0]
];
const ASSET_ANIMATION = [ASSET_ANIMATION_1];
const ENGINE_ANIMATION_1 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ENGINE_ANIMATION_2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ENGINE_ANIMATION_3 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
const ENGINE_ANIMATION = [ENGINE_ANIMATION_1, ENGINE_ANIMATION_2, ENGINE_ANIMATION_3];

class Spaceship1Class extends SpaceshipClass {
    constructor(gameService, ctx, boundarySetup) {
        super(gameService, ctx, boundarySetup, true);
    }
    spawn() {
        this.assetAnimations = ASSET_ANIMATION;
        this.engineAnimations = ENGINE_ANIMATION;
        super.spawn();
    }
}

class SpaceshipComponent {
    constructor(gameService, gameCookieService) {
        this.gameService = gameService;
        this.gameCookieService = gameCookieService;
        this.isAnimateOnce = false;
        this.assets = [
            {
                key: 'spaceship1',
                name: 'S-1'
            },
            {
                key: 'spaceship2',
                name: 'S-2'
            }
        ];
    }
    ngOnInit() {
        const rows = 20;
        const columns = 20;
        this.ctx = this.gameService.initBoard(this.canvas, columns, rows, 25);
        this.addSpaceships({
            x: 0,
            y: 0,
            height: rows,
            width: columns
        });
        this.isAnimateOnce = true;
        this.toggleAssets(this.gameCookieService.getSecondaryDebugData());
        this.animate();
    }
    addSpaceships(boundary) {
        this.spaceships = [];
        const spaceship1 = new Spaceship1Class(this.gameService, this.ctx, boundary);
        spaceship1.isDestroyed = true;
        this.spaceships.push(spaceship1);
        const spaceship2 = new Spaceship2Class(this.gameService, this.ctx, boundary, true);
        spaceship2.isDestroyed = true;
        this.spaceships.push(spaceship2);
        this.spaceship = this.spaceships[0];
        this.spaceship.isAnimateOnce = true;
        this.spaceship.isDestroyed = false;
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.spaceship.isDestroyed = false;
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 1, 0.1);
    }
    animate(now = 0) {
        this.draw();
        this.spaceship.animate(now);
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    keyDownEvent(event) {
        event.preventDefault();
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.keyDownEvent,
            stringData: event.code
        });
    }
    keyUpEvent(event) {
        event.preventDefault();
        this.gameService.emitMasterObservableEvent({
            type: ObservableTypeEnum.keyUpEvent,
            stringData: event.code
        });
    }
    toggleAssets(key) {
        this.spaceship.isDestroyed = true;
        this.draw();
        let index = 0;
        this.spaceships.map((spaceship) => {
            spaceship.isDestroyed = true;
        });
        this.assets.map((asset, $index) => {
            if (key === asset.key) {
                index = $index;
                this.gameCookieService.setDebugData({
                    secondaryAssetName: key
                });
            }
        });
        this.spaceship = this.spaceships[index];
        this.animateAsset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceshipComponent, deps: [{ token: GameService }, { token: GameCookieService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: SpaceshipComponent, selector: "bp-spaceship", host: { listeners: { "window:keydown": "keyDownEvent($event)", "window:keyup": "keyUpEvent($event)" } }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Spaceship</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceshipComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-spaceship', template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Spaceship</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: GameService }, { type: GameCookieService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }], keyDownEvent: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }], keyUpEvent: [{
                type: HostListener,
                args: ['window:keyup', ['$event']]
            }] } });

class SpaceInvadersComponent {
    constructor(gameConfiguration, gameCookieService) {
        this.gameCookieService = gameCookieService;
        this.isDebug = gameConfiguration.isDebug;
        this.debugAssets = {
            spaceship: true,
            alienBoss: false,
            alien: false,
            missile: false,
            number: false,
            bomb: false,
            defense: false
        };
        this.assets = [
            {
                key: 'spaceship',
                name: 'Spaceship'
            },
            {
                key: 'alien',
                name: 'Alien'
            },
            {
                key: 'alienBoss',
                name: 'Alien Boss'
            },
            {
                key: 'bomb',
                name: 'Bomb'
            },
            {
                key: 'missile',
                name: 'Missile'
            },
            {
                key: 'defense',
                name: 'Defense'
            },
            {
                key: 'number',
                name: 'Number'
            }
        ];
    }
    ngOnInit() {
        this.toggleAssets(this.gameCookieService.getDebugData());
    }
    toggleAssets(asset) {
        Object.keys(this.debugAssets).map((key) => {
            if (key === asset) {
                this.debugAssets[key] = true;
                this.gameCookieService.setDebugData({
                    assetName: key
                });
            }
            else {
                this.debugAssets[key] = false;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceInvadersComponent, deps: [{ token: 'GameConfigurationData' }, { token: GameCookieService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: SpaceInvadersComponent, selector: "bp-space-invaders", ngImport: i0, template: "<div class=\"game-container\" [class.debug]=\"isDebug\">\n  <div *ngIf=\"!isDebug\">\n    <bp-gameboard></bp-gameboard>\n  </div>\n  <div *ngIf=\"isDebug\" class=\"debug-container\">\n    <div *ngIf=\"debugAssets.spaceship\">\n      <bp-spaceship></bp-spaceship>\n    </div>\n    <div *ngIf=\"debugAssets.alienBoss\">\n      <bp-alien-boss></bp-alien-boss>\n    </div>\n    <div *ngIf=\"debugAssets.alien\">\n      <bp-alien></bp-alien>\n    </div>\n    <div *ngIf=\"debugAssets.missile\">\n      <bp-missile></bp-missile>\n    </div>\n    <div *ngIf=\"debugAssets.bomb\">\n      <bp-bomb></bp-bomb>\n    </div>\n    <div *ngIf=\"debugAssets.defense\">\n      <bp-moon-defense></bp-moon-defense>\n    </div>\n    <div *ngIf=\"debugAssets.number\">\n      <bp-number></bp-number>\n    </div>\n    <div class=\"button-container\">\n      <div *ngFor=\"let asset of assets\">\n        <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n          {{ asset.name }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["*{font-family:\"Press Start 2P\",cursive}.game-container{overflow-x:hidden;overflow-y:hidden}.game-container.debug{height:1200px}.game-container .debug-container{margin-top:10px}.game-container .debug-container .button-container{flex-wrap:wrap;position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .debug-container .button-container .button{font-family:\"'Press Start 2P', cursive\";background-color:#4caf50;font-size:16px;padding:15px 30px;cursor:pointer;width:200px;height:75px;border:1px solid black;margin-top:10px}\n", "@font-face{font-family:\"Press Start 2P\";src:local(\"Press Start 2P Regular\"),local(\"PressStart2P-Regular\"),url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\");font-weight:400;font-style:normal}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: AlienBossComponent, selector: "bp-alien-boss" }, { kind: "component", type: AlienComponent, selector: "bp-alien" }, { kind: "component", type: BombComponent, selector: "bp-bomb" }, { kind: "component", type: GameboardComponent, selector: "bp-gameboard" }, { kind: "component", type: MissileComponent, selector: "bp-missile" }, { kind: "component", type: MoonDefenseComponent, selector: "bp-moon-defense" }, { kind: "component", type: NumberComponent, selector: "bp-number" }, { kind: "component", type: SpaceshipComponent, selector: "bp-spaceship" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceInvadersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-space-invaders', template: "<div class=\"game-container\" [class.debug]=\"isDebug\">\n  <div *ngIf=\"!isDebug\">\n    <bp-gameboard></bp-gameboard>\n  </div>\n  <div *ngIf=\"isDebug\" class=\"debug-container\">\n    <div *ngIf=\"debugAssets.spaceship\">\n      <bp-spaceship></bp-spaceship>\n    </div>\n    <div *ngIf=\"debugAssets.alienBoss\">\n      <bp-alien-boss></bp-alien-boss>\n    </div>\n    <div *ngIf=\"debugAssets.alien\">\n      <bp-alien></bp-alien>\n    </div>\n    <div *ngIf=\"debugAssets.missile\">\n      <bp-missile></bp-missile>\n    </div>\n    <div *ngIf=\"debugAssets.bomb\">\n      <bp-bomb></bp-bomb>\n    </div>\n    <div *ngIf=\"debugAssets.defense\">\n      <bp-moon-defense></bp-moon-defense>\n    </div>\n    <div *ngIf=\"debugAssets.number\">\n      <bp-number></bp-number>\n    </div>\n    <div class=\"button-container\">\n      <div *ngFor=\"let asset of assets\">\n        <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n          {{ asset.name }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: ["*{font-family:\"Press Start 2P\",cursive}.game-container{overflow-x:hidden;overflow-y:hidden}.game-container.debug{height:1200px}.game-container .debug-container{margin-top:10px}.game-container .debug-container .button-container{flex-wrap:wrap;position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .debug-container .button-container .button{font-family:\"'Press Start 2P', cursive\";background-color:#4caf50;font-size:16px;padding:15px 30px;cursor:pointer;width:200px;height:75px;border:1px solid black;margin-top:10px}\n", "@font-face{font-family:\"Press Start 2P\";src:local(\"Press Start 2P Regular\"),local(\"PressStart2P-Regular\"),url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\");font-weight:400;font-style:normal}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: ['GameConfigurationData']
                }] }, { type: GameCookieService }] });

class SpaceInvadersModule {
    static forRoot(gameConfiguration) {
        return {
            ngModule: SpaceInvadersModule,
            providers: [
                {
                    provide: 'GameConfigurationData',
                    useValue: gameConfiguration
                },
                CookieService,
                GameCookieService
            ]
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceInvadersModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.0.7", ngImport: i0, type: SpaceInvadersModule, declarations: [AlienBossComponent,
            AlienComponent,
            BombComponent,
            GameboardComponent,
            MissileComponent,
            MoonDefenseComponent,
            NumberComponent,
            SpaceInvadersComponent,
            SpaceshipComponent], imports: [CommonModule], exports: [SpaceInvadersComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceInvadersModule, providers: [CookieService, GameCookieService, GameService], imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: SpaceInvadersModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        AlienBossComponent,
                        AlienComponent,
                        BombComponent,
                        GameboardComponent,
                        MissileComponent,
                        MoonDefenseComponent,
                        NumberComponent,
                        SpaceInvadersComponent,
                        SpaceshipComponent
                    ],
                    exports: [SpaceInvadersComponent],
                    providers: [CookieService, GameCookieService, GameService]
                }]
        }] });

export { SpaceInvadersComponent, SpaceInvadersModule };
//# sourceMappingURL=bp-space-invaders.mjs.map
