import { ASSET_ANIMATION, COLORS, KEY, DESTRUCTION_ANIMATION } from './bomb-constants';
import { AssetClass } from '../asset/asset.class';
export class BombClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
        this.moves = {
            [KEY.DOWN]: (asset) => ({ ...asset, y: asset.y + 5 })
        };
    }
    spawn() {
        this.assetAnimation = ASSET_ANIMATION[0];
        this.engineAnimation = [];
        this.destructionAnimations = DESTRUCTION_ANIMATION;
        this.destructionAnimation = this.destructionAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.scale(1, 1);
        this.drawBomb();
        this.ctx.restore();
    }
    drawBomb() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                this.ctx.fillStyle = COLORS[value];
                this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
            });
        });
    }
    drawBombDestruction() {
        this.destructionAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
                }
            });
        });
    }
    destructionAnimate(now = 0) {
        this.destructionTimer.elapsed = now - this.destructionTimer.start;
        if (this.destructionAnimationCounter === this.destructionAnimations.length) {
            cancelAnimationFrame(this.destructionRequestId);
            return;
        }
        if (this.destructionTimer.elapsed > 30) {
            this.destructionTimer.start = now;
            this.destructionAnimation =
                this.destructionAnimations[this.destructionAnimationCounter++ % this.destructionAnimations.length];
        }
        this.drawBombDestruction();
        this.destructionRequestId = requestAnimationFrame(this.destructionAnimate.bind(this));
    }
    animate(now = 0) {
        this.engineTimer.elapsed = now - this.engineTimer.start;
        this.destructionAnimationCounter = 0;
        if (this.engineTimer.elapsed > 75) {
            this.engineTimer.start = now;
            const asset = this.moves['ArrowDown'](this);
            if (this.gameService.valid(asset, this.boundary)) {
                this.move(asset);
            }
            else {
                this.destructionAnimate();
                this.isDestroyed = true;
            }
        }
        this.draw();
    }
}
//# sourceMappingURL=data:application/json;base64,