import { AssetClass } from '../../asset/asset.class';
import { ObservableTypeEnum } from '../../enum/observable-type.enum';
import { COLORS, DESTRUCTION_ANIMATION, KEY } from './spaceship-constants';
export class SpaceshipClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, isPrimary) {
        super(gameService, ctx, boundarySetup, 0);
        this.isPrimary = isPrimary;
        this.moves = {
            [KEY.LEFT]: (asset) => ({ ...asset, x: asset.x - 3 }),
            [KEY.RIGHT]: (asset) => ({ ...asset, x: asset.x + 3 }),
            [KEY.SPACE]: true
        };
        this.missileFired = false;
        this.missileTimer = {
            start: performance.now(),
            elapsed: 0
        };
    }
    keyDownMove(eventCode) {
        const asset = this.moves[eventCode](this);
        if (this.gameService.valid(asset, this.boundary)) {
            this.move(asset);
        }
        else {
            clearInterval(this.keyDownInterval);
            this.keyDownInterval = undefined;
        }
    }
    processKeyStroke(event) {
        if (this.isPrimary) {
            const eventCode = event.stringData;
            const keyDown = event.type === ObservableTypeEnum.keyDownEvent;
            if (this.moves[eventCode]) {
                if (eventCode === KEY.SPACE && keyDown) {
                    this.missileFired = true;
                }
                else {
                    if ((keyDown && this.currentKeyDown !== eventCode) || (!keyDown && this.currentKeyDown === eventCode)) {
                        clearInterval(this.keyDownInterval);
                        this.keyDownInterval = undefined;
                        this.currentKeyDown = undefined;
                    }
                    if (keyDown && this.currentKeyDown !== eventCode) {
                        this.currentKeyDown = eventCode;
                        this.keyDownMove(eventCode);
                        this.keyDownInterval = window.setInterval(() => {
                            this.keyDownMove(eventCode);
                        }, 50);
                    }
                }
            }
        }
    }
    spawn() {
        this.assetAnimation = this.assetAnimations[0];
        this.engineAnimation = this.engineAnimations[0];
        this.destructionAnimations = DESTRUCTION_ANIMATION;
        this.destructionAnimation = this.destructionAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawSpaceship();
        this.drawEngine();
        this.ctx.restore();
    }
    drawSpaceship() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(x, y, 1, 1);
                }
            });
        });
    }
    drawEngine() {
        this.engineAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(this.x + this.engineXOffset + x, this.y + this.engineYOffset + y, 1, 1);
                }
            });
        });
    }
    isHit(alienBombAsset) {
        if (!this.isDestroyed) {
            this.isDestroyed = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, alienBombAsset);
            if (this.isDestroyed) {
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.spaceshipDestroyed,
                    booleanData: true
                });
                alienBombAsset.isDestroyed = true;
            }
        }
    }
    drawSpaceshipDestruction() {
        this.destructionAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
                }
            });
        });
    }
    destructionAnimate(now = 0) {
        this.ctx.clearRect(this.x - 10, this.y, this.getAssetWidth() + 20, this.getAssetHeight());
        this.destructionTimer.elapsed = now - this.destructionTimer.start;
        if (this.destructionAnimationCounter === this.destructionAnimations.length) {
            cancelAnimationFrame(this.destructionRequestId);
            return;
        }
        if (this.destructionTimer.elapsed > 50) {
            this.destructionTimer.start = now;
            this.destructionAnimation =
                this.destructionAnimations[this.destructionAnimationCounter++ % this.destructionAnimations.length];
        }
        this.drawSpaceshipDestruction();
        this.destructionRequestId = requestAnimationFrame(this.destructionAnimate.bind(this));
    }
    animate(now = 0) {
        this.assetTimer.elapsed = now - this.assetTimer.start;
        this.engineTimer.elapsed = now - this.engineTimer.start;
        this.missileTimer.elapsed = now - this.missileTimer.start;
        if (this.isDestroyed) {
            this.destructionAnimate();
            return;
        }
        this.destructionAnimationCounter = 0;
        if (this.assetTimer.elapsed > 1000) {
            this.assetTimer.start = now;
            this.assetAnimation = this.assetAnimations[this.animationCounter++ % this.assetAnimations.length];
        }
        if (this.missileTimer.elapsed > 500 && this.missileFired) {
            this.missileFired = false;
            this.missileTimer.start = now;
            this.gameService.emitMasterObservableEvent({
                type: ObservableTypeEnum.missileShot,
                assetCoordinateData: {
                    x: this.x + this.getAssetWidth() / 2 - 1,
                    y: this.y + 5
                }
            });
        }
        if (this.engineTimer.elapsed > 200 && this.engineAnimations.length > 0) {
            this.engineTimer.start = now;
            this.engineAnimation = this.engineAnimations[this.engineAnimationCounter++ % this.engineAnimations.length];
        }
        this.draw();
    }
}
//# sourceMappingURL=data:application/json;base64,