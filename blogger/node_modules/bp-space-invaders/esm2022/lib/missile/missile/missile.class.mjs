import { COLORS, KEY } from './missile-constants';
import { AssetClass } from '../../asset/asset.class';
export class MissileClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
        this.moves = {
            [KEY.UP]: (asset) => ({ ...asset, y: asset.y - 5 })
        };
    }
    spawn() {
        this.assetAnimation = this.assetAnimations[0];
        this.engineAnimation = this.engineAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawMissile();
        this.drawEngine();
        this.ctx.restore();
    }
    drawMissile() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                this.ctx.fillStyle = COLORS[value];
                this.ctx.fillRect(x, y, 1, 1);
            });
        });
    }
    drawEngine() {
        this.engineAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                this.ctx.fillStyle = COLORS[value];
                this.ctx.fillRect(this.x + this.engineXOffset + x, this.y + this.engineYOffset + y, 1, 1);
            });
        });
    }
    animate(now = 0) {
        this.engineTimer.elapsed = now - this.engineTimer.start;
        if (this.engineTimer.elapsed > 30) {
            this.engineTimer.start = now;
            this.engineAnimation = this.engineAnimations[this.engineAnimationCounter++ % this.engineAnimations.length];
            const asset = this.moves['ArrowUp'](this);
            if (this.gameService.valid(asset, this.boundary)) {
                this.move(asset);
            }
            else {
                this.isDestroyed = true;
            }
        }
        this.draw();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzc2lsZS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NwYWNlLWludmFkZXJzL3NyYy9saWIvbWlzc2lsZS9taXNzaWxlL21pc3NpbGUuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUdsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNckQsTUFBTSxPQUFnQixZQUFhLFNBQVEsVUFBVTtJQWVuRCxZQUNFLFdBQXdCLEVBQ3hCLEdBQTZCLEVBQzdCLGFBQWlDLEVBQ2pDLElBQVk7UUFFWixLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFqQnZDLFVBQUssR0FBRztZQUNkLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBYSxFQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7U0FDcEUsQ0FBQztJQWdCRixDQUFDO0lBS2tCLEtBQUs7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhELEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBS1MsSUFBSTtRQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFLTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFLTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1RixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQU1NLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFFeEQsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUU7WUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzRyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUN6QjtTQUNGO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09MT1JTLCBLRVkgfSBmcm9tICcuL21pc3NpbGUtY29uc3RhbnRzJztcbmltcG9ydCB7IElBc3NldCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9hc3NldC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgR2FtZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL2dhbWUuc2VydmljZSc7XG5pbXBvcnQgeyBBc3NldENsYXNzIH0gZnJvbSAnLi4vLi4vYXNzZXQvYXNzZXQuY2xhc3MnO1xuaW1wb3J0IHsgQm91bmRhcnlTZXR1cE1vZGVsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYm91bmRhcnktc2V0Lm1vZGVsJztcblxuLyoqXG4gKiBUaGUgTWlzc2lsZSBDbGFzc1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTWlzc2lsZUNsYXNzIGV4dGVuZHMgQXNzZXRDbGFzcyB7XG4gIC8qKlxuICAgKiBUaGUgbW92ZXNcbiAgICovXG4gIHByaXZhdGUgbW92ZXMgPSB7XG4gICAgW0tFWS5VUF06IChhc3NldDogSUFzc2V0KTogSUFzc2V0ID0+ICh7IC4uLmFzc2V0LCB5OiBhc3NldC55IC0gNSB9KVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gZ2FtZVNlcnZpY2UgVGhlIEdhbWVTZXJ2aWNlXG4gICAqIEBwYXJhbSBjdHggVGhlIGN0eFxuICAgKiBAcGFyYW0gYm91bmRhcnlTZXR1cCBUaGUgQm91bmRhcnlTZXR1cE1vZGVsXG4gICAqIEBwYXJhbSBndWlkIFRoZSBndWlkIG9mIHRoZSBtaXNzc2xlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBnYW1lU2VydmljZTogR2FtZVNlcnZpY2UsXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgYm91bmRhcnlTZXR1cDogQm91bmRhcnlTZXR1cE1vZGVsLFxuICAgIGd1aWQ6IG51bWJlclxuICApIHtcbiAgICBzdXBlcihnYW1lU2VydmljZSwgY3R4LCBib3VuZGFyeVNldHVwLCBndWlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGF3biB0aGUgbWlzc2lsZVxuICAgKi9cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHNwYXduKCk6IHZvaWQge1xuICAgIHRoaXMuYXNzZXRBbmltYXRpb24gPSB0aGlzLmFzc2V0QW5pbWF0aW9uc1swXTtcbiAgICB0aGlzLmVuZ2luZUFuaW1hdGlvbiA9IHRoaXMuZW5naW5lQW5pbWF0aW9uc1swXTtcblxuICAgIHN1cGVyLnNwYXduKCk7XG4gIH1cblxuICAvKipcbiAgICogRHJhdyBldmVueXRoaW5nIG5lY2Vzc2FyeVxuICAgKi9cbiAgcHJvdGVjdGVkIGRyYXcoKTogdm9pZCB7XG4gICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgIHRoaXMuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XG4gICAgdGhpcy5kcmF3TWlzc2lsZSgpO1xuICAgIHRoaXMuZHJhd0VuZ2luZSgpO1xuICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IHRoZSBtaXNzaWxlXG4gICAqL1xuICBwcml2YXRlIGRyYXdNaXNzaWxlKCkge1xuICAgIHRoaXMuYXNzZXRBbmltYXRpb24uZm9yRWFjaCgocm93LCB5KSA9PiB7XG4gICAgICByb3cuZm9yRWFjaCgodmFsdWUsIHgpID0+IHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gQ09MT1JTW3ZhbHVlXTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeCwgeSwgMSwgMSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3IHRoZSBlbmdpbmVcbiAgICovXG4gIHByaXZhdGUgZHJhd0VuZ2luZSgpIHtcbiAgICB0aGlzLmVuZ2luZUFuaW1hdGlvbi5mb3JFYWNoKChyb3csIHkpID0+IHtcbiAgICAgIHJvdy5mb3JFYWNoKCh2YWx1ZSwgeCkgPT4ge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBDT0xPUlNbdmFsdWVdO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh0aGlzLnggKyB0aGlzLmVuZ2luZVhPZmZzZXQgKyB4LCB0aGlzLnkgKyB0aGlzLmVuZ2luZVlPZmZzZXQgKyB5LCAxLCAxKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuaW1hdGUgdGhlIG1pc3NpbGVcbiAgICogQHBhcmFtIG5vdyB0aGUgY3VycmVudCB0aW1lXG4gICAqL1xuICBwdWJsaWMgYW5pbWF0ZShub3cgPSAwKTogdm9pZCB7XG4gICAgdGhpcy5lbmdpbmVUaW1lci5lbGFwc2VkID0gbm93IC0gdGhpcy5lbmdpbmVUaW1lci5zdGFydDtcblxuICAgIGlmICh0aGlzLmVuZ2luZVRpbWVyLmVsYXBzZWQgPiAzMCkge1xuICAgICAgdGhpcy5lbmdpbmVUaW1lci5zdGFydCA9IG5vdztcbiAgICAgIHRoaXMuZW5naW5lQW5pbWF0aW9uID0gdGhpcy5lbmdpbmVBbmltYXRpb25zW3RoaXMuZW5naW5lQW5pbWF0aW9uQ291bnRlcisrICUgdGhpcy5lbmdpbmVBbmltYXRpb25zLmxlbmd0aF07XG4gICAgICBjb25zdCBhc3NldCA9IHRoaXMubW92ZXNbJ0Fycm93VXAnXSh0aGlzKTtcbiAgICAgIGlmICh0aGlzLmdhbWVTZXJ2aWNlLnZhbGlkKGFzc2V0LCB0aGlzLmJvdW5kYXJ5KSkge1xuICAgICAgICB0aGlzLm1vdmUoYXNzZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kcmF3KCk7XG4gIH1cbn1cbiJdfQ==