import { COLORS, DESTRUCTION_ANIMATION } from './alien-constants';
import { ObservableTypeEnum } from '../../enum/observable-type.enum';
import { AssetClass } from '../../asset/asset.class';
export class AlienClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid, assetPoints) {
        super(gameService, ctx, boundarySetup, guid);
        this.assetPoints = assetPoints;
        this.bombTimer = {
            start: performance.now(),
            elapsed: 0
        };
    }
    spawn() {
        this.assetAnimation = this.assetAnimations[0];
        this.engineAnimation = [];
        this.destructionAnimations = DESTRUCTION_ANIMATION;
        this.destructionAnimation = this.destructionAnimations[0];
        super.spawn();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawAlien();
        this.ctx.restore();
    }
    drawAlien() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(x, y, 1, 1);
                }
            });
        });
    }
    isHit(missileAsset) {
        if (!this.isDestroyed) {
            this.isDestroyed = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, missileAsset);
            const alienType = this.isAlienAsset ? ObservableTypeEnum.alienDestroyed : ObservableTypeEnum.alienBossDestroyed;
            if (this.isDestroyed) {
                this.gameService.emitMasterObservableEvent({
                    type: alienType,
                    numberData: this.uid,
                    pointData: this.points
                });
                missileAsset.isDestroyed = true;
            }
        }
    }
    creep(asset) {
        asset.shape = this.shape;
        return this.gameService.valid(asset, this.boundary);
    }
    randomizeDropBomb() {
        if (this.canFireWeapon) {
            const randomBombNumber = Math.floor(Math.random() * 10 + 1);
            return randomBombNumber >= 4 && randomBombNumber <= 6;
        }
        return false;
    }
    drawAlienDestruction() {
        this.destructionAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(this.x + x, this.y + y, 1, 1);
                }
            });
        });
    }
    destructionAnimate(now = 0) {
        this.destructionTimer.elapsed = now - this.destructionTimer.start;
        if (this.destructionAnimationCounter === this.destructionAnimations.length) {
            cancelAnimationFrame(this.destructionRequestId);
            return;
        }
        if (this.destructionTimer.elapsed > 50) {
            this.destructionTimer.start = now;
            this.destructionAnimation =
                this.destructionAnimations[this.destructionAnimationCounter++ % this.destructionAnimations.length];
        }
        this.drawAlienDestruction();
        this.destructionRequestId = requestAnimationFrame(this.destructionAnimate.bind(this));
    }
    animate(now = 0) {
        this.assetTimer.elapsed = now - this.assetTimer.start;
        this.bombTimer.elapsed = now - this.bombTimer.start;
        if (this.isDestroyed) {
            this.destructionAnimate();
            return;
        }
        this.destructionAnimationCounter = 0;
        if (this.assetTimer.elapsed > 900) {
            this.assetTimer.start = now;
            this.assetAnimation = this.assetAnimations[this.animationCounter++ % this.assetAnimations.length];
        }
        if (this.bombTimer.elapsed > 1000) {
            this.bombTimer.start = now;
            if (this.randomizeDropBomb()) {
                this.gameService.emitMasterObservableEvent({
                    type: ObservableTypeEnum.bombDropped,
                    assetCoordinateData: {
                        x: this.x + this.getAssetWidth() / 2 - 1,
                        y: this.y + this.getAssetHeight() - 5
                    }
                });
            }
        }
        this.draw();
    }
    get points() {
        return this.assetPoints;
    }
    isAlien() {
        return this.isAlienAsset;
    }
}
//# sourceMappingURL=data:application/json;base64,