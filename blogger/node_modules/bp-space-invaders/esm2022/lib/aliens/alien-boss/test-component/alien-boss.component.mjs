import { Component, ElementRef, ViewChild } from '@angular/core';
import { GameService } from '../../../service/game.service';
import { AssetAlignVerticalEnum } from '../../../asset/enum/asset-align-vertical.enum';
import { AssetAlignEnum } from '../../../asset/enum/asset-align.enum';
import { AlienBoss1Class } from '../../alien-boss-1/alien-boss-1.class';
import { AlienBoss2Class } from '../../alien-boss-2/alien-boss-2.class';
import { GameCookieService } from '../../../service/game-cookie.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../service/game.service";
import * as i2 from "../../../service/game-cookie.service";
import * as i3 from "@angular/common";
export class AlienBossComponent {
    constructor(gameService, gameCookieService) {
        this.gameService = gameService;
        this.gameCookieService = gameCookieService;
        this.isAnimateOnce = true;
        this.assets = [
            {
                key: 'alienBoss',
                name: 'Boss'
            },
            {
                key: 'alienBoss2',
                name: 'Boss 2'
            }
        ];
    }
    ngOnInit() {
        const columns = 20;
        const rows = 20;
        this.ctx = this.gameService.initBoard(this.canvas, rows, columns, 25);
        this.addAlienBosses({
            x: 0,
            y: 0,
            height: rows,
            width: columns
        });
        this.toggleAssets(this.gameCookieService.getSecondaryDebugData());
        this.animate();
    }
    addAlienBosses(boundary) {
        this.alienBosses = [];
        const boss = new AlienBoss1Class(this.gameService, this.ctx, boundary, 1);
        boss.move(boss.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        boss.isAnimateOnce = true;
        this.alienBosses.push(boss);
        const boss2 = new AlienBoss2Class(this.gameService, this.ctx, boundary, 1);
        boss2.move(boss2.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        boss2.isAnimateOnce = true;
        this.alienBosses.push(boss2);
        this.alienBoss = this.alienBosses[1];
        this.alienBoss.isAnimateOnce = true;
        this.alienBoss.isDestroyed = false;
    }
    animateAsset() {
        this.isAnimateOnce = !this.isAnimateOnce;
        this.alienBoss.isDestroyed = false;
        this.alienBoss.move(this.alienBoss.positionAsset(AssetAlignEnum.center, AssetAlignVerticalEnum.middle));
        cancelAnimationFrame(this.requestId);
        this.animate();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.gameService.addOutlines(this.ctx, 1, 0.025);
    }
    animate() {
        this.draw();
        this.alienBoss.animate();
        if (!this.isAnimateOnce) {
            this.requestId = requestAnimationFrame(this.animate.bind(this));
        }
    }
    toggleAssets(key) {
        this.alienBoss.isDestroyed = true;
        this.draw();
        let index = 0;
        this.alienBosses.map((alienBoss) => {
            alienBoss.isDestroyed = true;
        });
        this.assets.map((asset, $index) => {
            if (key === asset.key) {
                index = $index;
                this.gameCookieService.setDebugData({
                    secondaryAssetName: key
                });
            }
        });
        this.alienBoss = this.alienBosses[index];
        this.animateAsset();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: AlienBossComponent, deps: [{ token: i1.GameService }, { token: i2.GameCookieService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: AlienBossComponent, selector: "bp-alien-boss", viewQueries: [{ propertyName: "canvas", first: true, predicate: ["board"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Alien</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: AlienBossComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bp-alien-boss', template: "<div class=\"game-container\">\n  <div class=\"asset-title\">Alien</div>\n  <div class=\"game-board-container\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n  <div class=\"button-container\">\n    <button (click)=\"animateAsset()\" class=\"animation-button button\">Animate</button>\n    <div *ngFor=\"let asset of assets\">\n      <button (click)=\"toggleAssets(asset.key)\" class=\"animation-button button\">\n        {{ asset.name }}\n      </button>\n    </div>\n  </div>\n</div>\n", styles: [".game-container .asset-title{margin:25px;width:100%;text-align:center}.game-container .game-board-container{display:flex;flex-direction:row;justify-content:center}.game-container .game-board-container .game-board{border:solid 2px grey;background-color:#000}.game-container .button-container{position:relative;margin-top:25px;display:flex;flex-direction:row;justify-content:space-evenly}.game-container .button-container .animation-button{background-color:#4caf50}.game-container .button-container .button{font-size:16px;padding:15px 30px;cursor:pointer;width:165px;border:1px solid black}\n"] }]
        }], ctorParameters: () => [{ type: i1.GameService }, { type: i2.GameCookieService }], propDecorators: { canvas: [{
                type: ViewChild,
                args: ['board', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,