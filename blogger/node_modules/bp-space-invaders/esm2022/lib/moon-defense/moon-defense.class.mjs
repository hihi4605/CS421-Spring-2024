import { ASSET_ANIMATION, COLORS } from './moon-defense-constants';
import { ObservableTypeEnum } from '../enum/observable-type.enum';
import { AssetClass } from '../asset/asset.class';
export class MoonDefenseClass extends AssetClass {
    constructor(gameService, ctx, boundarySetup, guid) {
        super(gameService, ctx, boundarySetup, guid);
    }
    spawn() {
        this.restore();
        super.spawn();
    }
    restore() {
        this.assetAnimation = JSON.parse(JSON.stringify(ASSET_ANIMATION[0]));
        this.engineAnimation = [];
        super.restore();
    }
    draw() {
        this.ctx.save();
        this.ctx.translate(this.x, this.y);
        this.drawMoonDefense();
        this.ctx.restore();
    }
    drawMoonDefense() {
        this.assetAnimation.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value > 0) {
                    this.ctx.fillStyle = COLORS[value];
                    this.ctx.fillRect(x, y, 1, 1);
                }
            });
        });
    }
    isHitBomb(bombAsset) {
        if (!this.isDestroyed) {
            const defenseHit = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, bombAsset);
            if (defenseHit) {
                const assetX = Math.round(bombAsset.x - this.x);
                let rowHit = -1;
                for (let y = 0; y < this.getAssetHeight(); y++) {
                    if (this.assetAnimation[y][assetX] > 0) {
                        rowHit = y;
                        break;
                    }
                }
                for (let y = rowHit; y < rowHit + bombAsset.shape.length; y++) {
                    const row = this.assetAnimation[y];
                    if (row) {
                        const nextColumn = assetX + 1;
                        this.assetAnimation[y][assetX] = 0;
                        this.assetAnimation[y][nextColumn] = 0;
                        this.shape[y][assetX] = 0;
                        this.shape[y][nextColumn] = 0;
                    }
                    else {
                        break;
                    }
                }
                bombAsset.isDestroyed = true;
                let counter = 0;
                this.assetAnimation.map((row) => {
                    row.map((value) => {
                        counter += value;
                    });
                });
                this.isDestroyed = counter === 0;
            }
        }
    }
    isHitMissile(missileAsset) {
        if (!this.isDestroyed) {
            const defenseHit = this.gameService.isHit({
                x: this.x,
                y: this.y,
                shape: this.shape
            }, missileAsset);
            if (defenseHit) {
                const assetX = Math.round(missileAsset.x - this.x);
                let rowHit = -1;
                for (let y = this.getAssetHeight() - 1; y >= 0; y--) {
                    if (this.assetAnimation[y][assetX] > 0) {
                        rowHit = y;
                        break;
                    }
                }
                for (let y = rowHit; y > rowHit - missileAsset.shape.length; y--) {
                    const row = this.assetAnimation[y];
                    if (row) {
                        const nextColumn = assetX + 1;
                        this.assetAnimation[y][assetX] = 0;
                        this.assetAnimation[y][nextColumn] = 0;
                        this.shape[y][assetX] = 0;
                        this.shape[y][nextColumn] = 0;
                    }
                    else {
                        break;
                    }
                }
                missileAsset.isDestroyed = true;
                let counter = 0;
                this.assetAnimation.map((row) => {
                    row.map((value) => {
                        counter += value;
                    });
                });
                this.isDestroyed = counter === 0;
            }
        }
    }
    animate() {
        if (this.isDestroyed || this.isGameOver) {
            this.gameService.emitMasterObservableEvent({
                type: ObservableTypeEnum.moonDefenseDestroyed,
                numberData: this.uid
            });
            return;
        }
        this.draw();
    }
}
//# sourceMappingURL=data:application/json;base64,