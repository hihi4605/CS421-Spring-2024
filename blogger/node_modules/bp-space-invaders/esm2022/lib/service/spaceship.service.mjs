import { AssetAlignEnum } from '../asset/enum/asset-align.enum';
import { AssetAlignVerticalEnum } from '../asset/enum/asset-align-vertical.enum';
import { ObservableTypeEnum } from '../enum/observable-type.enum';
import { Spaceship2Class } from '../spaceships/spaceship-2/spaceship-2.class';
export class SpaceshipService {
    constructor(gameService, ctx, boundary) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundary = boundary;
        this.spaceships = [];
        this.gameboardBottom = this.gameService.getGameboard().height;
        this.setUp();
        this.gameService.getMasterObservable().subscribe((resultModel) => {
            if (resultModel.type === ObservableTypeEnum.spaceshipDestroyed) {
                this.spaceship.isDestroyed = false;
                this.removeSpaceshipReserve();
            }
        });
    }
    setUp() {
        Array(2)
            .fill(0)
            .map(() => {
            this.spaceships.unshift(new Spaceship2Class(this.gameService, this.ctx, this.boundary, false));
        });
        let extraLivesX = 10;
        this.spaceships
            .filter((spaceship) => !spaceship.isDestroyed)
            .map((spaceship) => {
            spaceship.move({
                x: extraLivesX,
                y: this.gameboardBottom - spaceship.getAssetHeight()
            });
            extraLivesX += 20;
        });
        this.spaceship = new Spaceship2Class(this.gameService, this.ctx, this.boundary, true);
    }
    setupSpaceships() {
        this.spaceship.isDestroyed = false;
        const spaceshipAsset = this.gameService.positionAsset(this.spaceship, AssetAlignEnum.center, AssetAlignVerticalEnum.bottom);
        spaceshipAsset.y = this.boundary.height - this.spaceship.getAssetHeight();
        this.spaceship.move(spaceshipAsset);
        this.spaceships.map((spaceship) => {
            spaceship.isDestroyed = false;
        });
    }
    getSpaceshipYPosition() {
        return this.spaceship.y;
    }
    isHit(alienBombAsset) {
        this.spaceship.isHit(alienBombAsset);
    }
    getActiveSpaceshipReserves() {
        return this.spaceships.filter((spaceship) => !spaceship.isDestroyed);
    }
    removeSpaceshipReserve() {
        const reserves = this.getActiveSpaceshipReserves();
        if (reserves.length) {
            reserves[reserves.length - 1].isDestroyed = true;
        }
    }
    animate(now = 0) {
        this.getActiveSpaceshipReserves().map((spaceship) => {
            spaceship.animate(now);
        });
        this.spaceship.animate(now);
    }
}
//# sourceMappingURL=data:application/json;base64,