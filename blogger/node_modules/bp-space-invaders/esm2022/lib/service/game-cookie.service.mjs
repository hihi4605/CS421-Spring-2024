import { Injectable } from '@angular/core';
import { CookieService } from 'ngx-cookie-service';
import * as i0 from "@angular/core";
import * as i1 from "ngx-cookie-service";
export class GameCookieService {
    constructor(cookieService) {
        this.cookieService = cookieService;
    }
    getCookie(cookieName) {
        return this.cookieService.get(cookieName);
    }
    getGameData() {
        const cookie = this.getCookie('bp-space-invaders');
        return cookie ? JSON.parse(cookie) : { highScore: 0 };
    }
    setGameData(data) {
        this.cookieService.set('bp-space-invaders', JSON.stringify(data));
    }
    getDebugData() {
        const cookie = this.getCookie('bp-space-invaders-debug');
        return cookie ? JSON.parse(cookie)['assetName'] : '';
    }
    getSecondaryDebugData() {
        const cookie = this.getCookie('bp-space-invaders-debug');
        return cookie ? JSON.parse(cookie)['secondaryAssetName'] : '';
    }
    setDebugData(debugData) {
        const cookie = this.getCookie('bp-space-invaders-debug');
        const existingCookie = (cookie ? JSON.parse(cookie) : {});
        existingCookie.assetName = debugData.assetName ? debugData.assetName : existingCookie.assetName;
        existingCookie.secondaryAssetName = debugData.secondaryAssetName
            ? debugData.secondaryAssetName
            : existingCookie.secondaryAssetName;
        this.cookieService.set('bp-space-invaders-debug', JSON.stringify(existingCookie));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameCookieService, deps: [{ token: i1.CookieService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameCookieService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameCookieService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.CookieService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS1jb29raWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NwYWNlLWludmFkZXJzL3NyYy9saWIvc2VydmljZS9nYW1lLWNvb2tpZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFVbkQsTUFBTSxPQUFPLGlCQUFpQjtJQUs1QixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7SUFLNUMsU0FBUyxDQUFDLFVBQWtCO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUtNLFdBQVc7UUFDaEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBbUIsQ0FBQyxDQUFDLENBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFvQixDQUFDO0lBQzlGLENBQUM7SUFLTSxXQUFXLENBQUMsSUFBbUI7UUFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFLTSxZQUFZO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUV6RCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ25FLENBQUM7SUFLTSxxQkFBcUI7UUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBRXpELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLG9CQUFvQixDQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM1RSxDQUFDO0lBT00sWUFBWSxDQUFDLFNBQXlCO1FBQzNDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUN6RCxNQUFNLGNBQWMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFtQixDQUFDO1FBQzVFLGNBQWMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUNoRyxjQUFjLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDLGtCQUFrQjtZQUM5RCxDQUFDLENBQUMsU0FBUyxDQUFDLGtCQUFrQjtZQUM5QixDQUFDLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDOzhHQTVEVSxpQkFBaUI7a0hBQWpCLGlCQUFpQixjQUZoQixNQUFNOzsyRkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gJ25neC1jb29raWUtc2VydmljZSc7XG5pbXBvcnQgeyBHYW1lRGF0YU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZS1kYXRhLm1vZGVsJztcbmltcG9ydCB7IERlYnVnRGF0YU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvZGVidWctZGF0YS5tb2RlbCc7XG5cbi8qKlxuICogVGhlIENvb2tpZSBzZXJ2aWNlXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEdhbWVDb29raWVTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gY29va2llU2VydmljZSBUaGUgY29va2llU2VydmljZSBmcm9tIERJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvb2tpZVNlcnZpY2U6IENvb2tpZVNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY29va2llXG4gICAqL1xuICBwcml2YXRlIGdldENvb2tpZShjb29raWVOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvb2tpZVNlcnZpY2UuZ2V0KGNvb2tpZU5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgSGlnaCBTY29yZVxuICAgKi9cbiAgcHVibGljIGdldEdhbWVEYXRhKCk6IEdhbWVEYXRhTW9kZWwge1xuICAgIGNvbnN0IGNvb2tpZSA9IHRoaXMuZ2V0Q29va2llKCdicC1zcGFjZS1pbnZhZGVycycpO1xuICAgIHJldHVybiBjb29raWUgPyAoSlNPTi5wYXJzZShjb29raWUpIGFzIEdhbWVEYXRhTW9kZWwpIDogKHsgaGlnaFNjb3JlOiAwIH0gYXMgR2FtZURhdGFNb2RlbCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjb29raWVcbiAgICovXG4gIHB1YmxpYyBzZXRHYW1lRGF0YShkYXRhOiBHYW1lRGF0YU1vZGVsKTogdm9pZCB7XG4gICAgdGhpcy5jb29raWVTZXJ2aWNlLnNldCgnYnAtc3BhY2UtaW52YWRlcnMnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBEZWJ1ZyBpbmZvcm1hdGlvblxuICAgKi9cbiAgcHVibGljIGdldERlYnVnRGF0YSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvb2tpZSA9IHRoaXMuZ2V0Q29va2llKCdicC1zcGFjZS1pbnZhZGVycy1kZWJ1ZycpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL1xuICAgIHJldHVybiBjb29raWUgPyAoSlNPTi5wYXJzZShjb29raWUpWydhc3NldE5hbWUnXSBhcyBzdHJpbmcpIDogJyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBTZWNvbmRhcnkgRGVidWcgaW5mb3JtYXRpb25cbiAgICovXG4gIHB1YmxpYyBnZXRTZWNvbmRhcnlEZWJ1Z0RhdGEoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb29raWUgPSB0aGlzLmdldENvb2tpZSgnYnAtc3BhY2UtaW52YWRlcnMtZGVidWcnKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICByZXR1cm4gY29va2llID8gKEpTT04ucGFyc2UoY29va2llKVsnc2Vjb25kYXJ5QXNzZXROYW1lJ10gYXMgc3RyaW5nKSA6ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVidWcgY29va2llIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIGFzc2V0TmFtZSBUaGUgYXNzZXQgbmFtZVxuICAgKi9cbiAgcHVibGljIHNldERlYnVnRGF0YShkZWJ1Z0RhdGE6IERlYnVnRGF0YU1vZGVsKTogdm9pZCB7XG4gICAgY29uc3QgY29va2llID0gdGhpcy5nZXRDb29raWUoJ2JwLXNwYWNlLWludmFkZXJzLWRlYnVnJyk7XG4gICAgY29uc3QgZXhpc3RpbmdDb29raWUgPSAoY29va2llID8gSlNPTi5wYXJzZShjb29raWUpIDoge30pIGFzIERlYnVnRGF0YU1vZGVsO1xuICAgIGV4aXN0aW5nQ29va2llLmFzc2V0TmFtZSA9IGRlYnVnRGF0YS5hc3NldE5hbWUgPyBkZWJ1Z0RhdGEuYXNzZXROYW1lIDogZXhpc3RpbmdDb29raWUuYXNzZXROYW1lO1xuICAgIGV4aXN0aW5nQ29va2llLnNlY29uZGFyeUFzc2V0TmFtZSA9IGRlYnVnRGF0YS5zZWNvbmRhcnlBc3NldE5hbWVcbiAgICAgID8gZGVidWdEYXRhLnNlY29uZGFyeUFzc2V0TmFtZVxuICAgICAgOiBleGlzdGluZ0Nvb2tpZS5zZWNvbmRhcnlBc3NldE5hbWU7XG4gICAgdGhpcy5jb29raWVTZXJ2aWNlLnNldCgnYnAtc3BhY2UtaW52YWRlcnMtZGVidWcnLCBKU09OLnN0cmluZ2lmeShleGlzdGluZ0Nvb2tpZSkpO1xuICB9XG59XG4iXX0=