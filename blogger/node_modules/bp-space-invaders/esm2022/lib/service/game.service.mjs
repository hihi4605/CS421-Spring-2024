import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { AssetAlignEnum } from '../asset/enum/asset-align.enum';
import { AssetAlignVerticalEnum } from '../asset/enum/asset-align-vertical.enum';
import { BLOCK_SIZE } from '../gameboard/gameboard-constants';
import * as i0 from "@angular/core";
export class GameService {
    constructor() {
        this.masterSubject$ = new Subject();
    }
    valid(asset, boundary) {
        return asset.shape.every((row, dy) => {
            return row.every((value, dx) => {
                const x = asset.x + dx;
                const y = asset.y + dy;
                return (this.isEmpty(value) ||
                    (this.insideWalls(x, boundary) &&
                        this.aboveFloor(y, boundary.floor) &&
                        this.belowCeiling(y, boundary.ceiling)));
            });
        });
    }
    isEmpty(value) {
        return value === 0;
    }
    insideWalls(x, boundary) {
        return x >= boundary.left && x <= boundary.right;
    }
    belowCeiling(y, boundaryTop) {
        return y >= boundaryTop;
    }
    aboveFloor(y, boundaryBottom) {
        return y <= boundaryBottom;
    }
    getBoundary(boundarySetup) {
        return {
            left: boundarySetup.x,
            right: boundarySetup.width,
            ceiling: boundarySetup.y,
            floor: boundarySetup.height
        };
    }
    isHit(asset, damageAsset) {
        if (asset.x <= damageAsset.x &&
            damageAsset.x <= asset.x + asset.shape[0].length &&
            asset.y <= damageAsset.y &&
            damageAsset.y <= asset.y + asset.shape.length) {
            const startY = damageAsset.y;
            let maxY = startY + damageAsset.shape.length;
            if (maxY > asset.y + asset.shape.length) {
                maxY = asset.y + asset.shape.length;
            }
            for (let y = startY; y < maxY; y++) {
                for (let x = damageAsset.x; x < damageAsset.x + damageAsset.shape[y - damageAsset.y].length; x++) {
                    const assetY = Math.round(Math.abs(y - asset.y));
                    const assetX = Math.round(Math.abs(x - asset.x));
                    const damageAssetY = Math.round(Math.abs(y - damageAsset.y));
                    const damageAssetX = Math.round(Math.abs(x - damageAsset.x));
                    if (asset.shape[assetY][assetX] > 0 && damageAsset.shape[damageAssetY][damageAssetX] > 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    addOutlines(ctx, offset, width) {
        ctx.fillStyle = 'grey';
        let lastIndex = 0;
        for (let index = 0; index < ctx.canvas.width; index += offset) {
            ctx.fillRect(index, 0, width, ctx.canvas.height);
            lastIndex = index;
        }
        ctx.fillRect(lastIndex + 1, 0, width, ctx.canvas.height);
        for (let index = 0; index < ctx.canvas.height; index += offset) {
            ctx.fillRect(0, index, ctx.canvas.width, width);
            lastIndex = index;
        }
        ctx.fillRect(0, lastIndex + 1, ctx.canvas.width, width);
        ctx.fillStyle = 'red';
        ctx.fillRect(ctx.canvas.width / (BLOCK_SIZE * 2), 0, width, ctx.canvas.height);
        ctx.fillRect(0, ctx.canvas.height / (BLOCK_SIZE * 2), ctx.canvas.width, width);
    }
    initBoard(canvas, columns, rows, blockSize) {
        const ctx = canvas.nativeElement.getContext('2d');
        this.board = {
            x: 0,
            y: 0,
            height: rows,
            width: columns
        };
        ctx.canvas.width = columns * blockSize + 1;
        ctx.canvas.height = rows * blockSize + 1;
        ctx.scale(blockSize, blockSize);
        return ctx;
    }
    getGameboard() {
        return this.board;
    }
    getMasterObservable() {
        return this.masterSubject$;
    }
    emitMasterObservableEvent(data) {
        this.masterSubject$.next(data);
    }
    positionAsset(asset, alignPosition, justifyPosition) {
        let x = 0;
        let y = 0;
        if (alignPosition === AssetAlignEnum.center) {
            x = (this.board.width - asset.getAssetWidth()) / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftThird) {
            x = this.board.width / 3 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftFourth) {
            x = this.board.width / 4 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightThird) {
            x = (this.board.width * 2) / 3 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightFourth) {
            x = (this.board.width * 3) / 4 - asset.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.right) {
            x = this.board.width - asset.getAssetWidth();
        }
        if (justifyPosition === AssetAlignVerticalEnum.bottom) {
            y = this.board.height - asset.getAssetHeight();
        }
        else if (justifyPosition === AssetAlignVerticalEnum.middle) {
            y = (this.board.height - asset.getAssetHeight()) / 2;
        }
        return {
            x: Math.round(x),
            y: Math.round(y)
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: GameService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,