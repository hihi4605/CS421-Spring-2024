import { ObservableTypeEnum } from '../enum/observable-type.enum';
import { Missile2Class } from '../missile/missile-2/missile-2.class';
import { BombClass } from '../bomb/bomb.class';
export class ProjectileService {
    constructor(gameService, ctx, boundary) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundary = boundary;
        this.spaceshipMissiles = [];
        this.alienBombs = [];
        this.isGamePaused = false;
        this.init();
    }
    init() {
        this.gameService.getMasterObservable().subscribe((event) => {
            if (event.type === ObservableTypeEnum.missileShot) {
                this.launchMissile(event);
            }
            else if (event.type === ObservableTypeEnum.bombDropped) {
                this.dropBomb(event);
            }
            else if (event.type === ObservableTypeEnum.gamePaused) {
                this.isGamePaused = event.booleanData;
            }
        });
    }
    findUnusedMissile() {
        return this.spaceshipMissiles.filter((missile) => missile.isDestroyed)[0];
    }
    findUnusedBomb() {
        return this.alienBombs.filter((bomb) => bomb.isDestroyed)[0];
    }
    getActiveMissiles() {
        return this.spaceshipMissiles.filter((missile) => !missile.isDestroyed);
    }
    getActiveBombs() {
        return this.alienBombs.filter((bomb) => !bomb.isDestroyed);
    }
    removeProjectiles() {
        this.getActiveMissiles().map((missile) => {
            missile.isDestroyed = true;
        });
        this.getActiveBombs().map((bomb) => {
            bomb.isDestroyed = true;
        });
    }
    animate(now = 0) {
        if (!this.isGamePaused) {
            this.getActiveMissiles().map((missile) => {
                missile.animate(now);
            });
            this.getActiveBombs().map((bomb) => {
                bomb.animate(now);
            });
        }
    }
    launchMissile(event) {
        let missile = this.findUnusedMissile();
        if (!missile) {
            missile = new Missile2Class(this.gameService, this.ctx, this.boundary, this.spaceshipMissiles.length);
            this.spaceshipMissiles.push(missile);
        }
        missile.isDestroyed = false;
        missile.move(event.assetCoordinateData);
    }
    dropBomb(event) {
        let bomb = this.findUnusedBomb();
        if (!bomb) {
            bomb = new BombClass(this.gameService, this.ctx, this.boundary, this.alienBombs.length);
            this.alienBombs.push(bomb);
        }
        bomb.isDestroyed = false;
        bomb.move(event.assetCoordinateData);
    }
}
//# sourceMappingURL=data:application/json;base64,