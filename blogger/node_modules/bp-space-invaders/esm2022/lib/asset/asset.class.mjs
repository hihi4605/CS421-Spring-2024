import { AssetAlignEnum } from './enum/asset-align.enum';
import { AssetAlignVerticalEnum } from './enum/asset-align-vertical.enum';
import { ObservableTypeEnum } from '../enum/observable-type.enum';
export class AssetClass {
    constructor(gameService, ctx, boundarySetup, uid) {
        this.gameService = gameService;
        this.ctx = ctx;
        this.boundarySetup = boundarySetup;
        this.uid = uid;
        this.x = 0;
        this.y = 0;
        this.isAnimateOnce = false;
        this.isDestroyed = false;
        this.isGameOver = false;
        this.isGamePaused = false;
        this.spawn();
        this.boundary = this.gameService.getBoundary(boundarySetup);
        this.init();
    }
    init() {
        this.gameService.getMasterObservable().subscribe((result) => {
            if (result.type === ObservableTypeEnum.keyDownEvent || result.type === ObservableTypeEnum.keyUpEvent) {
                this.processKeyStroke(result);
            }
            else if (result.type === ObservableTypeEnum.gameOver) {
                this.isGameOver = result.booleanData;
            }
            else if (result.type === ObservableTypeEnum.gamePaused) {
                this.isGamePaused = result.booleanData;
            }
        });
    }
    getAssetHeight() {
        return this.shape.length;
    }
    getAssetWidth() {
        return this.shape[0].length;
    }
    positionAsset(alignPosition, justifyPosition) {
        let x = 0;
        let y = 0;
        if (alignPosition === AssetAlignEnum.center) {
            x = (this.boundary.right - this.getAssetWidth()) / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftThird) {
            x = this.boundary.right / 3 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.leftFourth) {
            x = this.boundary.right / 4 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightThird) {
            x = (this.boundary.right * 2) / 3 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.rightFourth) {
            x = (this.boundary.right * 3) / 4 - this.getAssetWidth() / 2;
        }
        else if (alignPosition === AssetAlignEnum.right) {
            x = this.boundary.right - this.getAssetWidth();
        }
        if (justifyPosition === AssetAlignVerticalEnum.bottom) {
            y = this.boundary.floor - this.getAssetHeight();
        }
        else if (justifyPosition === AssetAlignVerticalEnum.middle) {
            y = (this.boundary.floor - this.getAssetHeight()) / 2;
        }
        return {
            x: Math.round(x),
            y: Math.round(y)
        };
    }
    processKeyStroke(event) { }
    spawn() {
        if (!(this.assetAnimation && this.assetAnimation.length > 0)) {
            throw new Error('You must have an asset array.');
        }
        if (!this.engineAnimation) {
            throw new Error('You must have an engine array.');
        }
        this.engineXOffset = 0;
        this.engineYOffset = this.assetAnimation.length;
        this.assetTimer = { start: 0, elapsed: 0 };
        this.destructionTimer = { start: 0, elapsed: 0 };
        this.engineTimer = { start: 0, elapsed: 0 };
        this.animationCounter = 0;
        this.engineAnimationCounter = 0;
        this.destructionAnimationCounter = 0;
        this.assetTimer.start = performance.now();
        this.destructionTimer.start = performance.now();
        this.engineTimer.start = performance.now();
        this.restore();
    }
    restore() {
        this.shape = JSON.parse(JSON.stringify(this.assetAnimation.concat(JSON.parse(JSON.stringify(this.engineAnimation)))));
    }
    move(asset) {
        this.x = Math.round(asset.x);
        this.y = Math.round(asset.y);
    }
    stopAnimation() {
        if (this.isDestroyed || this.isGameOver || this.isGamePaused || this.isAnimateOnce) {
            cancelAnimationFrame(this.requestId);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,